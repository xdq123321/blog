-- phpMyAdmin SQL Dump
-- version 4.4.15.10
-- https://www.phpmyadmin.net
--
-- Host: localhost
-- Generation Time: 2020-02-06 09:58:38
-- 服务器版本： 5.5.62-log
-- PHP Version: 5.4.45

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- Database: `feixiaobo`
--

-- --------------------------------------------------------

--
-- 表的结构 `article`
--

CREATE TABLE IF NOT EXISTS `article` (
  `article_id` int(4) NOT NULL,
  `article_title` varchar(25) COLLATE utf8_unicode_ci NOT NULL,
  `article_type` varchar(15) COLLATE utf8_unicode_ci NOT NULL,
  `article_content` varchar(200) COLLATE utf8_unicode_ci NOT NULL,
  `article_img` varchar(15) COLLATE utf8_unicode_ci NOT NULL,
  `article_time` int(13) NOT NULL,
  `article_watch` int(4) NOT NULL,
  `article_good` int(4) NOT NULL
) ENGINE=InnoDB AUTO_INCREMENT=43 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

--
-- 转存表中的数据 `article`
--

INSERT INTO `article` (`article_id`, `article_title`, `article_type`, `article_content`, `article_img`, `article_time`, `article_watch`, `article_good`) VALUES
(1, 'JavaScript数据类型', 'JavaScript', 'JavaScript共有七种数据类型,有Number 数值，String字符串，Boolean 布尔值，null，undefined，Symbol和Object这几种类型。前六种为原始类型( primitive type ),即它们是最基本滴数据类型，不能再细分，而第七种为合成类型，一个对象是多个原始类型的值的合成，例如数组，函数等都属于对象。', 'js-logo.jpg', 1568188697, 9, 4),
(2, 'JavaScript中的new操作符', 'JavaScript', '面向对象编程语言都有类这个概念，我认为类相当于对象的模板，对象是类的一个个实例。JavaScript继承是基于原型链和构造函数。New操作符在js中主要的作用便是继承，那么new操作符具体都干了些什么呢？new一共经历了4个阶段。一. 创建一个空对象 ；二. 设置原型链，让空对象的原型指向构造函数的prototype属性；三. 空对象赋值给函数内部this；四. 执行构造函数内部代码，返回新对象', 'js2.jpg', 1568208038, 17, 5),
(3, 'JavaScript this', 'JavaScript', 'JavaScript中的this关键字通常指向当前函数的拥有者，我们把它叫做执行上下文。执行上下文在运行时确定，随时可能会改变，而作用域则在定义时确定，不会变。那么this的指向有几种情况？（1）在全局执行上下文中，this指向全局对象window；（2）在函数内部，this指向函数的调用者（3）在call或apply方法中，this则指向其调用中的对象（4）使用new关键字时，this则指向构造', 'js-logo.jpg', 1568265542, 10, 2),
(4, 'setTimeout/setInterval', 'JavaScript', '定时器: setTimeout()和setInterval()用来注册在指定的时间后单次或重复调用的函数。两者传参一致，第一个参数传一个函数，第二个传间隔时间(单位为毫秒)，var num=0;setInterval(function(){num++;console.log(num);})', '14.gif', 1568623116, 11, 0),
(5, 'JavaScript 正则表达式笔记', 'JavaScript', '正则表达式可以处理比较复杂的文本数据处理如匹配，替换等，可以减少服务器端对输入信息验证的开销。写法: 可以使用RegExp()构造函数创建对象，也可以通过直接量创建。// var pattern = new RegExp("s$");var pattern = /s$/;', 'js1.png', 1568637516, 113, 0),
(6, 'JavaScript 闭包特性', 'JavaScript', 'JS采用词法作用域，函数体内部的变量都可以保存在函数作用域内，这种特性在计算机科学中称为"闭包"。父函数中定义了一个局部变量和一个子函数，并将子函数返回出去，由于函数的执行依赖变量作用域，其是在函数定义时决定，因此子函数依旧可以访问到父函数内局部变量,闭包便相当于函数内外部的桥梁。', 'js2.jpg', 1568680716, 29, 0),
(7, 'JavaScript里的事件委托', 'JavaScript', 'js事件委托就是利用事件冒泡，可以自动绑定动态添加的元素，不需要对每一个子元素绑定事件，只需要在父元素上绑定事件，如此，减少了操作DOM节点的次数，可以减少函数所占内存的空间，提高性能。  举个栗子，father.addEventListener(''click'',function(e){console.log(e.target)})', 'js.png', 1568695116, 38, 2),
(8, 'JavaScript JSON', 'JavaScript', 'Json 数据格式为key / value, json对象保存在大括号里，{"name" : "baidu","url" : "www.baidu.com"}, js内置函数阔以将json字符串和js对象相互转换', 'js-logo.jpg', 1568704228, 53, 0),
(9, 'JavaScript伪数组', 'JavaScript', '什么是伪数组？obj instanceof Array==false，它具有length属性，可以通过下标获取元素，但是不能用数组的原生方法，foreach等，但可以通过Array.prototype.slice方法将其转换成数组，常见的伪数组，HTMLCollection、arguments', 'js2.jpg', 1568772825, 258, 0),
(10, 'JavaScript ajax跨域请求', 'JavaScript', 'js利用ajax通过XMLHttpRequest对象可以异步请求后台数据，但是由于浏览器的"同源策略",不能实现跨域请求，那么我将介绍几种常用的方法来实现如何做到跨域请求。方法一. 目标域服务器设置Access-Control-Allow-Origin的值；方法二. 使用插件Allow-Control-Allow-Origin；方法三. JSONP,动态添加script标签（只支持get，不支持p', 'js3.png', 1568849595, 263, 1),
(11, '什么是HTML5？', 'HTML5', '什么是HTML5?即超文本标记语言修订版 5，是万维网内容的结构和表示的标记语言。HTML5 支持传统的 HTML 和 XHTML 样式语法以及其标记，新 API，XHTML 和错误处理中的其他新功能。HTML5将成为HTML、XHTML以及HTML DOM的新标准。目前，大部分现代浏览器已经具备了某些HTML5支持。', 'css3_img.png', 1568633113, 26, 0),
(12, 'Css实现盒子水平垂直居中的几种方法', 'CSS3', '在网站开发过程中，经常会碰到这样的需求，例如：DIV盒子等等模块设置成左右上下居中，可见掌握这一技能是非常有必要的！那么如何操作呢？接着往下看，要实现这种效果有五种方法。', 'center.jpg', 1569331775, 22, 1),
(13, 'css3弹性盒子常见属性总结', 'CSS3', 'display:flex 是一种布局方式。它即可以应用于容器中，也可以应用于行内元素。是W3C提出的一种新的方案，可以简便、完整、响应式地实现各种页面布局。目前，它已经得到了所有浏览器的支持。Flex是Flexible Box的缩写，意为"弹性布局"，用来为盒状模型提供最大的灵活性。设为Flex布局以后，子元素的float、clear和vertical-align属性将失效。', 'flex.png', 1566975990, 10, 0),
(14, 'flex布局实现瀑布流排版', 'CSS3', '瀑布流布局基本大家都见过，绝大多数是用于图片上。其实以前想做瀑布流还是不容易的，因为需要去定位，动态计算每张图片位置，于是就很多人做了类似的jq插件，例如：插件（Masonry，Wookmark等等）。按照正常的逻辑思维，瀑布流的排版（item列表）一般都是 由左到右，上而下排序的结果，单纯的css实现这一点有些困难 ，下面分享一款由flex布局实现的瀑布流效果，虽然效果难以达到有些插件的效果，但', 'flex11.png', 1567133111, 5, 0),
(15, 'css3 box-reflect属性', 'CSS3', '取值： direction： above：倒影想上方； below：倒影在下方； left：倒影在左边； right：倒影在右边。 offset： 可用单位：px  百分比 mask-box-image： none：无遮罩图像 url：使用绝对或相对地址指定遮罩图像； linear-gradient：使用线性渐变创建遮罩图像', 'divc.png', 1564446258, 4, 0),
(16, 'CSS3 新增文本属性', 'CSS3', 'text-overflow 定义文本溢出时所做的事，结合white-space、overflow属性一同使用，分别有3个值： &nbsp;&nbsp; clip：超出时裁剪文本 &nbsp;&nbsp; ellipsis：超出时显示省略号 &nbsp;&nbsp; inherit： 各浏览器兼容图 word-break', 'css3.jpg', 1566090622, 7, 0),
(17, 'CSS选择器', 'CSS3', '选择器 示例 示例说明 CSS .class .intro 选择所有class="intro"的元素 1 #id #firstname 选择所有id="firstname"的元素 1 * * 选择所有元素 2 element p 选择所有&lt;p&gt;元素 1 element,element div,p 选择所有&', 'css3_img.png', 1565572222, 3, 0),
(18, 'css3 animation动画属性', 'CSS3', 'animation复合属性 animation-name: 规定动画名称； animation-duration: 动画执行完成所需时间，单位s； animation-timing-function: 动画运动曲线，默认为ease； animation-delay: 规定是否延迟执行，默认为0； animation-i', 'css3_img.png', 1567239713, 4, 0),
(19, 'css3 过渡transition属性', 'CSS3', 'CSS3 transition 允许 CSS 元素的属性值在一定的时间区间内平滑地过渡。我们可以在不使用 Flash 动画或 JavaScript 的情况下，在元素从一种样式变换为另一种样式时为元素添加效果。transition 属性主要包含四个属性值：transition-property -- 规定应用过渡的 CSS 属性的名称；transition-duration -- 定义过渡效果花费的', 'css3.jpg', 1564971713, 3, 0),
(20, 'Grid布局', 'CSS3', '凭借 CSS Grid可轻松构建复杂的Web设计。它的工作原理是将HTML元素转换为具有行和列的网格容器，以便将子元素放置在网格中所需的位置。 通过将元素的父级设置display: grid;转化为网格布局。 &lt;div class="grid-wrap"&gt; &lt;div class="grid-item"', 'grid.png', 1568011908, 10, 0),
(21, 'HTML5--拖拽', 'HTML5', 'HTML5标准中新增了元素的拖放（drag and drop）接口，通过js与draggable属性的配合，可以对任一元素进行拖放，增强用户体验。', 'html.png', 1566269095, 21, 0),
(22, 'meta标签整理', 'HTML5', 'meta标签用来描述一个HTML网页文档的属性，例如作者、日期和时间、网页描述、关键词、页面刷新等。搜索引擎通过机器人自动查找网页中的meta值来给网站分类，只有完善了Meta，一个HTML页面才能算是完整的网页。通常，Meta值在网页中的存在形式：&lt;META NAME="Title" CONTENT=" 网页标题"&gt;', 'meta.jpg', 1567567169, 3, 0),
(23, 'Html5缓存技术--Cache manifest', 'HTML5', '网站打开速度慢，可能是由于某些文件过大，从服务器拿数据一时间加载不过来，比如一张大的图片或者音频视频，都会影响到网站的加载速度，这时，我们可以利用文件的压缩或是缓存技术来优化。h5提供了一种机制，叫做离线缓存，根据文件规则把资源缓存在本地，脱机依然能够访问资源，联网会直接使用缓存在本地的文件。优化加载速度，节约服务器资源。', 'cache.jpg', 1570149236, 26, 0),
(24, '各大企业网站css样式初始化集合', 'CSS3', 'CSS初始化是指重设浏览器的样式。不同的浏览器默认的样式可能不尽相同，所以开发时的第一件事可能就是如何把它们统一。如果没对CSS初始化往往会出现浏览器之间的页面差异。每次新开发网站或新网页时候通过初始化CSS样式的属性，为我们将用到的CSS或html标签更加方便准确，使得我们开发网页内容时更加方便简洁，同时减少CSS代码量，节约网页下载时间。', 'css.png', 1562211236, 4, 0),
(25, 'SASS安装配置命令', 'SASS', 'Sass (Syntactically Awesome Stylesheets) 是一个最初由 Hampton Catlin 设计并由 Natalie Weizenbaum 开发的层叠样式表语言。Sass 是一个 CSS 预处理器,它 是 CSS 扩展语言，可以帮助我们减少 CSS 重复的代码，节省开发时间。Sass 完全兼容所有版本的 CSS，其 扩展了 CSS3，增加了规则、变量、混入、选择器', 'sass.png', 1566542036, 5, 0),
(26, 'SASS基本用法笔记', 'SASS', 'SASS是CSS的预处理器（css preprocessor），CSS的一种开发工具，支持加减乘除运算、变量、嵌套、继承（继承上一个选择器）、mixin（代码重用）、颜色函数、插入文件、条件、循环语句、自定义函数。\r\nsass有两种写法，一种是以.sass后缀的文件语法是没有大括号的，和stylus风格类似；一种是.scss为后缀。', 'sass.png', 1566871845, 5, 0),
(27, 'Bootstrap常用类名总结', 'BootStrap', '刚自学完Bootstrap后,给大家整理了一些Bootstrap基础的常用类名出来,为了方便开发,熟练记忆.以备之后使用查看。 .container：两边留白非全屏，固定宽度并支持响应式布局的容器。 .container-fluid：宽度100%宽，用于占据全部视窗的容器。', 'bootstrap.png', 1567328951, 2, 0),
(28, 'Vue.js学习笔记--认识Vue', 'Vue', 'Vue.js是一套构建用户界面的渐进式框架，认识并学习了vue的语法，今天来记录一下。', 'vue_logo.png', 1568465382, 4, 0),
(29, 'Mysql基础知识', 'MySQL', ' 数据库（database）就是一个存储数据的仓库。为了方便数据的存储和管理，它将数据按照特定的规律存储在磁盘上。通过数据库管理系统，可以有效地组织和管理存储在数据库中的数据。MySQL 为关系型数据库(Relational Database Management System), 这种所谓的"关系型"可以理解为"表格"的概念, 一个关系型数据库由一个或数个表格组成。', 'mysql.jpg', 1567913582, 8, 0),
(30, '自我介绍', '关于博主', '以下是自我介绍', 'logo.jpg', 1567920880, 3, 0),
(31, 'MySQL中的存储过程和函数', 'MySQL', '存储过程（Stored Procedure）和函数（Stored Function）是在数据库中定义一些完成特定功能的SQL语句集合，经编译后存储在数据库中。存储过程和函数中可包含流程控制语句及各种SQL语句。它们可以接受参数、输出参数、返回单个或者多个结果。', 'mysql.jpg', 1568277619, 2, 0),
(32, 'MySQL中的触发器', 'MySQL', '触发器（Trigger）是一种特殊的存储过程。触发器基于一个表创建，但可以针对多个表进行操作，因此触发器可以用来对表实施复杂的完整性约束，当触发器所保存的数据发生改变，触发器被自动激活，从而防止对数据进行不正确的修改。比如，当对一个表进行（insert、update、delete）操作时就会激活它执行。 触发器与存储过程的唯一区别是触发器不能执行EXECUTE语句调用，而是在用户执行Transac', 'mysql.jpg', 1568370358, 5, 0),
(33, 'MySQL数据查询之多表连接查询', 'MySQL', '多表连接查询是指查询同时涉及两个或两个以上的表，连接查询是关系数据库中最主要的查询，表与表之间的连接分为交叉连接（Cross Join）、内连接（Inner Join）、自连接（Self Join）、外连接（Outer Join）。外连接又分为3种，即左外连接（Left Join）、右外连接（Right Join）和全外连接（Full Join）。', 'mysql.jpg', 1568468494, 10, 0),
(34, 'MySQL中的视图', 'MySQL', '视图是从一个或者几个基本表或者视图中导出的虚拟表，是从现有基表中抽取若干子集组成用户的"专用表"，包含一系列带有名称的列和行数据。在定义一个视图时，只是把其定义存放在数据库中，并不直接存储视图对应的数据。', 'mysql.jpg', 1568344477, 2, 0),
(35, 'php实现文件上传', 'PHP', '利用PHP实现文件的上传，由在客户端这边选择文件，上传到服务器。其中，在上传文件中，考虑到对上传文件大小的限制、类型限制等问题', 'php.jpg', 1565944520, 2, 0),
(36, 'PHP中的Cookie与Session', 'PHP', 'Cookie与Session是两种不同的存储机制。Cookie常用于识别用户，是一种服务器留在用户计算机上的小文件，每当同一台计算机通过浏览器请求页面时，这台计算机将会发送Cookie。Session变量用于存储关于用户会话的信息，存储在服务器端。', 'php.jpg', 1566363341, 6, 0),
(37, '一个简单的打字机效果', '实战案例', '利用字符串截取做一个打字机效果', 'fei.jpg', 1564034340, 6, 0),
(38, 'flex做一个瀑布流相册', '实战案例', '今天，学了flex布局，利用它来简单实现瀑布流布局相册', 'fei.jpg', 1564293540, 6, 0),
(39, '移动端首页-小案例', '实战案例', '期末作业做了一个移动端的首页，一个小练习来凑个数，(#^.^#)，在移动端访问比较好哟', 'fei.jpg', 1564815287, 7, 0),
(40, 'jq实现图片展示墙', '实战案例', 'jquery实现一个图片展示，实现原理很简单，点击图片后获取它的src属性，把其值传给显示盒子里头的图片路径就可以了', 'fei.jpg', 1565420087, 10, 0),
(41, 'jq写一个Q弹计算器', '实战案例', '用javascript写了一个Q弹计算器，赶紧进来看一看', 'fei.jpg', 1565578487, 11, 0),
(42, '软件分享', '软件工具', '给大家分享一些前端开发常用的软件工具，编辑器有HBuilder、Sublime Text、Dreamweaver、WebStorm、Visual Studio Code,UI设计制作软件常用的PS，WAMP集成环境等等', 'fei.jpg', 1566891193, 7, 0);

-- --------------------------------------------------------

--
-- 表的结构 `article_details`
--

CREATE TABLE IF NOT EXISTS `article_details` (
  `details_id` int(4) NOT NULL,
  `details_love` int(4) NOT NULL,
  `details_haha` int(4) NOT NULL,
  `details_wow` int(4) NOT NULL,
  `details_sad` int(4) NOT NULL,
  `details_content` varchar(10000) COLLATE utf8_unicode_ci NOT NULL,
  `details_tag` varchar(20) COLLATE utf8_unicode_ci NOT NULL,
  `desc_keyword` varchar(30) COLLATE utf8_unicode_ci NOT NULL,
  `desc_describe` varchar(100) COLLATE utf8_unicode_ci NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

--
-- 转存表中的数据 `article_details`
--

INSERT INTO `article_details` (`details_id`, `details_love`, `details_haha`, `details_wow`, `details_sad`, `details_content`, `details_tag`, `desc_keyword`, `desc_describe`) VALUES
(1, 2, 0, 0, 0, '<h2 class="title_h2">JS中的数据类型：</h2>\r\n		<p class="title_p">五种基本数据类型（Number，String，Boolean，Undefined，Null）,还有一种复杂数据类型 Object。ES6新引入了<code>Symbol</code></p>\r\n<p class="title_p"><strong>typeof 操作符</strong></p>\r\n				<div class="code-toolbar">\r\n<pre class="line-numbers language-javascript">\r\n<code class="language-javascript">\r\ntypeof  123     //Number\r\ntypeof  ''abc''   //String\r\ntypeof  true    //Boolean\r\ntypeof  undefined  //Undefined\r\ntypeof  null     //Object\r\ntypeof  { }      //Object\r\ntypeof  [ ]      //Object\r\ntypeof  function(){}   //Function\r\ntypeof  Symbol()    //symbol\r\n</code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>JavaScript</span></div></div>							\r\n				</div>\r\n				<h2 class="title_h2">JS数据类型转换：</h2>\r\n				<p class="title_p"><strong>显示转换</strong></p>\r\n				<p class="title_p">转换为数值类型：Number(mix)、parseInt(string,radix)、parseFloat(string)</p>\r\n				<p class="title_p">转换为字符串类型：toString(radix)、String(mix)</p>\r\n				<p class="title_p">转换为布尔类型：Boolean(mix)</p>\r\n				<p class="title_p"><strong>隐式转换</strong></p>\r\n	<div class="code-toolbar">\r\n<pre class="line-numbers language-javascript">\r\n<code class="language-javascript">\r\n	+     //10+''12''  ===>  ''1012''\r\n	! == ===         //转成布尔值\r\n	> <          //''12''>2  true\r\n</code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>JavaScript</span></div></div>	\r\n		</div>', 'JavaScript、js数据类型', 'javascript、前端笔记、js数据类型', 'JavaScript共有七种数据类型,有Number 数值，String字符串，Boolean 布尔值，null，undefined，Symbol和Object这几种类型'),
(2, 1, 1, 0, 0, '<h2 class="title_h2">JS中的new操作符</h2>\r\n		<p class="title_p">javascript是基于原型(Prototype based)的面向对象的语言，不同于Java/C++语言这种基于类模式(Class based)，JavaScript是基于构造函数（constructor）和原型链（prototype）， 通过构造函数生成新对象。</p>\r\n				<div class="code-toolbar">\r\n<pre class="line-numbers language-javascript">\r\n<code class="language-javascript">\r\nfunction Dog(name,color){\r\n	this.name = name;\r\n	this.color = color;\r\n}\r\nDog.prototype.barking=function(){\r\n	console.log(this.name + ''is barking'');\r\n}\r\nvar dog1 = new Dog(''旺财'',''白色'');\r\nvar dog2 = new Dog(''二哈'',''黑色'');\r\ndog1.name    //旺财\r\ndog2.name    //二哈\r\ndog1.barking()    //旺财 is barking\r\ndog2.barking()    //二哈 is barking\r\n</code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>JavaScript</span></div></div>							\r\n				</div>\r\n				<p class="title_p">上面代码中,<code>Dog</code>函数是一个构造函数，函数内部定义了<code>name</code>属性和<code>color</code>属性,所有实例对象都会生成这两个属性。而当这两个实例对象调用<code>barking</code>方法时,它们本身没有该方法，于是，它会到原型对象去寻找该方法，反之，则不会，这就是原型对象的妙处</p>\r\n				<p class="title_p">javascript生成对象要靠new操作符，那么new操作符到底干了些什么？</p>\r\n				<p class="title_p"><i class="iconfont title_i">&#xe666;</i> 创建一个空对象。<br/><i class="iconfont title_i">&#xe666;</i> 将构造函数的作用域赋给新对象（因此 this 就指向了这个新对象）。<br/><i class="iconfont title_i">&#xe666;</i> 执行构造函数中的代码（为这个新对象添加属性）。<br/>\r\n					<i class="iconfont title_i">&#xe666;</i> 返回新对象。\r\n				</p>\r\n	<div class="code-toolbar">\r\n<pre class="line-numbers language-javascript">\r\n<code class="language-javascript">\r\n	//等同于\r\nfunction Dog(name,color){\r\n	this.name = name;\r\n	this.color = color;\r\n}\r\nDog.prototype.barking=function(){\r\n	console.log(this.name + ''is barking'');\r\n}\r\nvar dog1={};\r\nDog.apply(dog1,arguments);\r\ndog1.__proto__ = Dog.prototype;\r\nreturn dog1;\r\n</code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>JavaScript</span></div></div>	\r\n		</div>\r\n	<p class="title_p"><img src="img/screen.png"/></p>\r\n	<p class="title_p"><img src="img/proto.jpg" alt="js原型链" /></p>', 'JavaScript、js new操作符', 'javascript、前端笔记、js中的new操作符', 'javascript是基于原型(Prototype based)的面向对象的语言，不同于Java/C++语言这种基于类模式(Class based)，JavaScript是基于构造函数（constru'),
(3, 0, 0, 1, 0, '<h2 class="title_h2">JS中的this介绍</h2>\r\n		<p class="title_p">在js中，this关键字是一个非常重要的语法点。在实际开发过程中，我们都会用到this来获取属性或方法当前所在的对象。随着函数使用场合不同，this的值会发生变化。但是总有一个原则，那就是this总是指向调用函数的那个对象</p>\r\n		<h2 class="title_h2">this使用场合</h2>\r\n		<p class="title_p"><i class="iconfont title_i">&#xe666;</i> 全局环境</p>\r\n				<div class="code-toolbar">\r\n<pre class="line-numbers language-javascript">\r\n<code class="language-javascript">\r\nvar a = 1;\r\nfunction fn(){\r\n	console.log(this.a);\r\n}\r\nfn();       //1\r\n</code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>JavaScript</span></div></div>							\r\n				</div>\r\n				<p class="title_p">上面代码说明，函数fn在全局环境下运行，<code>this</code>指向全局<code>window</code>对象，因此输出在全局环境下定义的a</p>\r\n				<p class="title_p"><i class="iconfont title_i">&#xe666;</i> 作为方法调用</p>\r\n	<div class="code-toolbar">\r\n<pre class="line-numbers language-javascript">\r\n<code class="language-javascript">\r\n	function test(){\r\n		alert(this.x);\r\n	}\r\n	var o = {};\r\n	o.x = 1;\r\n	o.m = test;\r\n	o.m();     //1\r\n</code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>JavaScript</span></div></div>	\r\n		</div>\r\n	<p class="title_p">对象的方法里面包含<code>this</code>，<code>this</code>的指向便是方法运行时所在的对象。</p>\r\n	<p class="title_p"><i class="iconfont title_i">&#xe666;</i> 作为构造函数调用</p>\r\n		<div class="code-toolbar">\r\n<pre class="line-numbers language-javascript">\r\n<code class="language-javascript">\r\nfunction Test(x){\r\n	this.x = x;\r\n}\r\nvar o = new Test(''hello'');\r\nalert(o.x);     //hello\r\n</code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>JavaScript</span></div></div>	\r\n		</div>\r\n		<p class="title_p"><code>this</code>作为构造函数调用。所谓构造函数，就是生成一个新的对象。这时，<code>this</code>就是指向这个实例对象。</p>\r\n		<p class="title_p"><i class="iconfont title_i">&#xe666;</i> apply、call调用</p>\r\n				<div class="code-toolbar">\r\n<pre class="line-numbers language-javascript">\r\n<code class="language-javascript">\r\nvar x = 0;\r\nvar obj = {x:2};\r\nfunction test(){\r\n	alert(this.x);\r\n}\r\nvar o = {};\r\no.x = 1;\r\no.m = test;\r\no.m.apply(null);    //0\r\no.m.call(obj);        //2\r\n</code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>JavaScript</span></div></div>	\r\n		</div>\r\n		<p class="title_p">call方法可以改变<code>this</code>的指向，指定<code>this</code>指向对象obj，然后在对象obj的作用域中运行函数test。call方法的参数，应该是一个对象。如果参数为空、<code>null</code>和<code>undefined</code>，则默认传入全局对象。</p>\r\n		<h2 class="title_h2">箭头函数中的this</h2>\r\n		<p class="title_p">function函数这种动态的<code>this</code>指向有他的好处，就是可以自由的指向对象，比如js中call或者apply方法可以动态指定function中的<code>this</code>对象，如果没有call或者apply方法，则是指向调用者的对象。</p>\r\n		<div class="code-toolbar">\r\n<pre class="line-numbers language-javascript">\r\n<code class="language-javascript">\r\nbirth =  1994;\r\nvar obj = {\r\n    birth: 2000,\r\n    getAge: function () {\r\n        console.log(this.birth);       \r\n    }\r\n};\r\nvar obj2 = {\r\n    birth: 2018;\r\n};\r\nvar a = obj.getAge;\r\na();//1994\r\na.call(obj);//2000\r\na.call(obj2);//2018\r\n</code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>JavaScript</span></div></div>	\r\n		</div>\r\n		<p class="title_p">如果使用箭头函数，则是如下结果：</p>\r\n			<div class="code-toolbar">\r\n<pre class="line-numbers language-javascript">\r\n<code class="language-javascript">\r\nbirth =  1994;\r\nvar obj = {\r\n    birth: 2000,\r\n    getAge: ()=> {\r\n        console.log(this.birth);       \r\n    }\r\n};\r\nvar obj2 = {\r\n    birth: 2018;\r\n};\r\nvar a = obj.getAge;\r\na();//1994\r\na.call(obj);//1994\r\na.call(obj2);//1994\r\n</code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>JavaScript</span></div></div>	\r\n		</div>\r\n		<p class="title_p">在浏览器中定义箭头函数的的调用对象为window，所以不用使用什么方法，它的<code>this</code>对象指向的都是window对象，所以<code>call</code>或者<code>apply</code>对箭头函数不起作用，因为箭头函数一旦被调用者定义就不会改变。 </p>', 'JavaScript、js this', 'javascript、前端笔记、js中的this用法', 'JavaScript中的this关键字通常指向当前函数的拥有者，我们把它叫做执行上下文。执行上下文在运行时确定，随时可能会改变，而作用域则在定义时确定，不会变。那么this的指向有几种情况？（1）在全'),
(4, 0, 1, 0, 0, '<h2 class="title_h2">定时器：setInterval与setTimeout</h2>\r\n		<p class="title_p"><span class="orange">setInterval</span>在指定时间内一直循环调用函数，不会自己停止,需要用<span class="orange">clearInterval</span>清除定时器。</p>\r\n		<div class="code-toolbar">\r\n<pre class="language-javascript line-numbers">\r\n<code class="language-javascript">\r\nvar timesRun = 0;\r\nvar interval = setInterval(function(){\r\n    timesRun += 1;\r\n    if(timesRun === 60){    \r\n        clearInterval(interval);    \r\n    }\r\n    //do whatever here..\r\n}, 2000);\r\n</code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>JavaScript</span></div></div>			\r\n		</div>\r\n<p class="title_p"><span class="orange">setTimeout</span>在指定时间内只调用一次函数,用<span class="orange">clearTimeout</span>清除定时器。</p>\r\n				<div class="code-toolbar">\r\n<pre class="line-numbers language-javascript">\r\n<code class="language-javascript">\r\n	//3秒之后弹出字符串abc\r\nsetTimeout(function(){\r\n    console.log("abc");\r\n},3000);\r\n</code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>JavaScript</span></div></div>							\r\n				</div>\r\n				<h2 class="title_h2">setTimeout经典面试题</h2>\r\n	<div class="code-toolbar">\r\n<pre class="line-numbers language-javascript">\r\n<code class="language-javascript">\r\n	//直接console\r\nfor(var i = 0; i < 5; i++) {\r\n	console.log(i);		// 0 1 2 3 4 \r\n}\r\n	//setTimeout是异步执行，在执行setTimeout时，i已经为5了\r\nfor(var i = 0; i < 5; i++) {\r\n	setTimeout(\r\n		function() {\r\n			console.log(i)	// 5 5 5 5 5 \r\n		}, 1000)\r\n}\r\n</code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>JavaScript</span></div></div>	\r\n			</div>\r\n<p class="title_p">js是单线程，它将setTimeout任务插入到了事件队列，必须等到当前代码（执行栈）执行完，主线程才会去执行它指定的回调函数。主线程执行完毕后,此时 i的值早已是 5,说以在执行异步队列的时候,打印出来的都是 5( event loop、js 的事件循环机制)<a href="http://www.ruanyifeng.com/blog/2013/10/event_loop.html" class="title_a" target="_blank">更多资料传送门 >></a></p>\r\n<h2 class="title_h2">解决方案</h2>\r\n	<div class="code-toolbar">\r\n<pre class="line-numbers language-javascript">\r\n<code class="language-javascript">\r\n	//使用IIFE（立即执行的匿名函数）\r\nfor(var i = 0; i < 5; i++) {\r\n	(function(i){\r\n		setTimeout(\r\n			function() {\r\n				console.log(i)	// 0 1 2 3 4 \r\n			}, 1000)\r\n	})(i)\r\n	\r\n}\r\n\r\n	//将i作为参数传递给setTimeout\r\nfor(var i = 0; i < 5; i++) {\r\n	setTimeout(\r\n		function(i) {\r\n			console.log(i)	// 0 1 2 3 4 \r\n		}, 1000, i)\r\n}\r\n\r\n	//es6中的let声明的变量是具有块级作用域\r\nfor(let i = 0; i < 5; i++) {\r\n	setTimeout(\r\n		function() {\r\n			console.log(i)	// 0 1 2 3 4 \r\n		}, 1000)\r\n}\r\n</code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>JavaScript</span></div></div>	\r\n		</div>', 'JavaScript、js定时器', 'javascript、前端笔记、js中的定时器', '定时器: setTimeout()和setInterval()用来注册在指定的时间后单次或重复调用的函数。两者传参一致，第一个参数传一个函数，第二个传间隔时间(单位为毫秒)，var num=0;set'),
(5, 36, 13, 3, 5, '		<p class="title_p">正则表达式是构成搜索模式的字符序列,该搜索模式可用于文本搜索和文本替换操作。<br/><i class="iconfont title_i">&#xe666;</i>正则表达式写法：</p>\r\n							<div class="code-toolbar">\r\n<pre class="language-javascript line-numbers">\r\n<code class="language-javascript">\r\n//第一种   字面量创建\r\nvar reg = /\\d{2,5}/g;\r\n//第二种  利用正则的构造函数来创建正则对象\r\nvar reg = new RegExp("\\d{2,5}");\r\n</code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>JavaScript</span></div></div>\r\n				</div>\r\n<p class="title_p">\r\n<i class="iconfont title_i">&#xe666;</i>标识：\r\n</p>\r\n				<div class="code-toolbar">\r\n<pre class="line-numbers language-javascript">\r\n<code class="language-javascript">\r\ng : 搜索整个字符串\r\ni : 不区分大小写\r\nm : 执行多行匹配\r\nvar str = ''abCDefgH'';\r\nstr.match(/(de)+/gi) //整个字符串搜索，不区分大小写\r\n</code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>JavaScript</span></div></div>\r\n				</div>\r\n	<p class="title_p">\r\n<i class="iconfont title_i">&#xe666;</i>字符集：[ ]\r\n</p>\r\n	<div class="code-toolbar">\r\n<pre class="line-numbers language-javascript">\r\n<code class="language-javascript">\r\n[a-h]        //表示a到h这些字符中的某一个字符\r\n[aeiou]       //表示aeiou这5个字符其中的某一个字符\r\n[a-zA-Z]       //表示大写、小写字母中的某一个字符\r\n[0-9]        //表示0到9之间任意一个数字\r\n[a-zA-Z0-9_-]   // 或小写、或大学、或数字或下划线横杠某一个字符\r\n</code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>JavaScript</span></div></div>\r\n				</div>\r\n	<p class="title_p">\r\n<i class="iconfont title_i">&#xe666;</i>量词：{}\r\n</p>\r\n	<div class="code-toolbar">\r\n<pre class="line-numbers language-javascript">\r\n<code class="language-javascript">\r\nn{X}:  匹配包含X个n的序列的字符串\r\nn{X,Y}:  匹配包含X至Y个n的序列的字符串\r\nn{X,}:  匹配至少包含 X 个 n 的序列的字符串。\r\nn*:  匹配任何包含零个或多个 n 的字符串。\r\nn?:  匹配任何包含零个或一个 n 的字符串。\r\nn+:  匹配任何至少包含一个 n 的字符串。\r\nn$:  匹配任何结尾为 n 的字符串。\r\n^n:  匹配任何开头为 n 的字符串。\r\n?=n: 匹配任何其后紧接指定字符串 n 的字符串。\r\n?!n: 匹配任何其后没有紧接指定字符串 n 的字符串。\r\n</code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>JavaScript</span></div></div>\r\n				</div>\r\n<p class="title_p">\r\n<i class="iconfont title_i">&#xe666;</i>元字符\r\n</p>\r\n	<div class="code-toolbar">\r\n<pre class="line-numbers language-javascript">\r\n<code class="language-javascript">\r\n\\w ------>查找单词字符\r\n\\W ------>查找非单词字符\r\n\\d ------>查找数字\r\n\\D ------>查找非数字字符\r\n\\s ------>匹配任意空白符\r\n</code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>JavaScript</span></div></div>\r\n				</div>\r\n<p class="title_p">\r\n<i class="iconfont title_i">&#xe666;</i>正则实例\r\n</p>\r\n	<div class="code-toolbar">\r\n<pre class="line-numbers language-javascript">\r\n<code class="language-javascript">\r\n "^\\d+$"　　//非负整数（正整数 + 0） \r\n "^[0-9]*[1-9][0-9]*$"　　//正整数 \r\n "^((-\\d+)|(0+))$"　　//非正整数（负整数 + 0） \r\n "^-[0-9]*[1-9][0-9]*$"　　//负整数 \r\n "^-?\\d+$"　　　　//整数 \r\n "^\\d+(\\.\\d+)?$"　　//非负浮点数（正浮点数 + 0） \r\n "^(([0-9]+\\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\\.[0-9]+)|([0-9]*[1-9][0-9]*))$"　　//正浮点数 \r\n "^((-\\d+(\\.\\d+)?)|(0+(\\.0+)?))$"　　//非正浮点数（负浮点数 + 0） \r\n "^(-(([0-9]+\\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\\.[0-9]+)|([0-9]*[1-9][0-9]*)))$"　　//负浮点数 \r\n "^(-?\\d+)(\\.\\d+)?$"　　//浮点数 \r\n "^[A-Za-z]+$"　　//由26个英文字母组成的字符串 \r\n "^[A-Z]+$"　　//由26个英文字母的大写组成的字符串 \r\n "^[a-z]+$"　　//由26个英文字母的小写组成的字符串 \r\n "^[A-Za-z0-9]+$"　　//由数字和26个英文字母组成的字符串 \r\n "^\\w+$"　　//由数字、26个英文字母或者下划线组成的字符串 \r\n "^[\\w-]+(\\.[\\w-]+)*@[\\w-]+(\\.[\\w-]+)+$"　　　　//email地址 \r\n "^[a-zA-z]+://(\\w+(-\\w+)*)(\\.(\\w+(-\\w+)*))*(\\?\\S*)?$"　　//url \r\n /^(d{2}|d{4})-((0([1-9]{1}))|(1[1|2]))-(([0-2]([1-9]{1}))|(3[0|1]))$/   //  年-月-日 \r\n /^((0([1-9]{1}))|(1[1|2]))/(([0-2]([1-9]{1}))|(3[0|1]))/(d{2}|d{4})$/   // 月/日/年 \r\n "^([w-.]+)@(([[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.)|(([w-]+.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(]?)$"   //Emil \r\n /^((\\+?[0-9]{2,4}\\-[0-9]{3,4}\\-)|([0-9]{3,4}\\-))?([0-9]{7,8})(\\-[0-9]+)?$/     //电话号码 \r\n</code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>JavaScript</span></div></div>\r\n				</div>	', 'JavaScript、js正则表达式', 'javascript、前端笔记、js中的正则表达式', '正则表达式可以处理比较复杂的文本数据处理如匹配，替换等，可以减少服务器端对输入信息验证的开销。写法: 可以使用RegExp()构造函数创建对象，也可以通过直接量创建。'),
(6, 1, 1, 0, 0, '<h2 class="title_h2">什么是闭包</h2>\r\n<p class="title_p">简单的讲,闭包是指可以访问另一个函数作用域变量的函数，一般是定义在外层函数中的内层函数。</p>\r\n							<div class="code-toolbar">\r\n<pre class="language-javascript line-numbers">\r\n<code class="language-javascript">\r\nfunction f1(){\r\n\r\n　　　　var n=1;\r\n\r\n　　　　function f2(){\r\n　　　　　　alert(n); \r\n　　　　}\r\n\r\n　　　　return f2;\r\n\r\n　　}\r\n\r\n　　var result=f1();\r\n\r\n　　result(); // 1\r\n</code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>JavaScript</span></div></div>\r\n				</div>\r\n<p class="title_p">\r\n以上代码中的f2函数就是闭包,函数的执行依赖变量作用域，其是在函数定义时决定，因此子函数依旧可以访问到父函数内局部变量,闭包便相当于函数内外部的桥梁\r\n</p>\r\n<h2 class="title_h2">闭包的特点</h2>\r\n<p class="title_p">\r\n	<i class="iconfont title_i">&#xe666;</i>可以读取到函数内部的变量<br/>\r\n	<i class="iconfont title_i">&#xe666;</i>让变量的值始终保持在内存中，这也是它的一大缺点，过度使用闭包，对内存的消耗会很大，可能会导致内存泄漏等问题，解决方法退出函数前,将不使用的变量删除\r\n</p>\r\n				<div class="code-toolbar">\r\n<pre class="line-numbers language-javascript">\r\n<code class="language-javascript">\r\nfunction addCount() {\r\n  var count = 0;\r\n  return function() {\r\n    count = count + 1;\r\n    console.log(count);\r\n  };\r\n}\r\nvar fun1 = addCount();\r\nfun1(); //1\r\nfun1(); //2\r\nvar fun2 = addCount();\r\nfun2(); //1\r\nfun2(); //2\r\n</code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>JavaScript</span></div></div>\r\n				</div>\r\n<h2 class="title_h2">闭包常见应用</h2>\r\n	<div class="code-toolbar">\r\n<pre class="line-numbers language-javascript">\r\n<code class="language-javascript">\r\n//多个元素并添加点击事件\r\nvar op = document.querySelectorAll("p");\r\nfor (var j = 0; j < op.length; j++) {\r\n  op[j].onclick = function() {\r\n    alert(j);\r\n  };\r\n}\r\n//alert出来的值是一样的\r\n// 解决办法一:\r\nfor (var j = 0; j < op.length; j++) {\r\n  (function(j) {\r\n    op[j].onclick = function() {\r\n      alert(j);\r\n    };\r\n  })(j);\r\n}\r\n// 解决办法二:\r\nfor (var j = 0; j < op.length; j++) {\r\n  op[j].onclick = (function(j) {\r\n    return function() {\r\n      alert(j);\r\n    };\r\n  })(j);\r\n}\r\n\r\n\r\n//for循环打印,打印结果都是4,如何打印出我们想要的结果0,1,2,3\r\nfor (var i = 0; i < 4; i++) {\r\n  setTimeout(function() {\r\n    console.log(i);\r\n  }, 300);\r\n}\r\n//方法一\r\nfor (var i = 0; i < 4; i++) {\r\n  setTimeout(\r\n    (function(i) {\r\n      return function() {\r\n        console.log(i);\r\n      };\r\n    })(i),\r\n    300\r\n  );\r\n}\r\n</code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>JavaScript</span></div></div>\r\n				</div>\r\n	<p class="title_p">\r\njs执行的时候首先会先执行主线程,异步相关的会加入到异步队列里,当主线程执行完毕开始执行异步队列, 主线程执行完毕后,此时 i的值早已是 4,说以在执行异步队列的时候,打印出来的都是 4( event loop、js 的事件循环机制) <a href="http://www.ruanyifeng.com/blog/2013/10/event_loop.html" class="title_a" target="_blank">更多资料传送门 >></a></p>', 'JavaScript、js闭包', 'javascript、前端笔记、js中的闭包', 'JS采用词法作用域，函数体内部的变量都可以保存在函数作用域内，这种特性在计算机科学中称为"闭包"。父函数中定义了一个局部变量和一个子函数，并将子函数返回出去，由于函数的执行依赖变量作用域，其是在函数定'),
(7, 1, 0, 0, 0, '<h2 class="title_h2">基本概念</h2>\r\n		<p class="title_p">事件委托，通俗地来讲，就是把一个元素响应事件的函数委托给另一个元素，一般是其父元素或更外层元素。而事件委托的实现是利用事件冒泡的机制，它把里层所需要响应的事件绑定到外层，事件触发\r\n		响应会从最底层目标一层一层地向外到最外层。</p>\r\n		<div class="code-toolbar">\r\n<pre class="language-html line-numbers">\r\n<code class="language-html">&lt;ul id="list"&gt;\r\n  &lt;li&gt;item 1&lt;/li&gt;\r\n  &lt;li&gt;item 2&lt;/li&gt;\r\n  &lt;li&gt;item 3&lt;/li&gt;\r\n  ......\r\n  &lt;li&gt;item n&lt;/li&gt;\r\n&lt;/ul&gt;\r\n</code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>HTML</span></div></div>				\r\n		</div>\r\n<p class="title_p">\r\n现在，我们要给<code>ul</code>下的每个<code>li</code>绑定一个点击事件，最常见的做法便是循环去给每个元素绑定事件，但是，元素一多，这样做对于内存是消耗非常大的，效率上\r\n需要消耗很多性能。\r\n</p>\r\n				<div class="code-toolbar">\r\n<pre class="line-numbers language-javascript">\r\n<code class="language-javascript">\r\nlet aLi = document.querySelectorAll(''li'');\r\nfor (let i = 0, length = aLi.length; i < length; i++) {\r\n  aLi[i].onclick = function () {\r\n    // code\r\n  }\r\n}\r\n</code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>JavaScript</span></div></div>					\r\n				</div>\r\n				<h2 class="title_h2">事件委托的优点</h2>\r\n<p class="title_p">1. 减少内存消耗<br/>2. 动态绑定事件</p>\r\n	<div class="code-toolbar">\r\n<pre class="line-numbers language-javascript">\r\n<code class="language-javascript">\r\n	// 给父层元素绑定事件\r\ndocument.getElementById(''list'').addEventListener(''click'', function (e) {\r\n  // 兼容性处理\r\n  var event = e || window.event;\r\n  var target = event.target || event.srcElement;\r\n  // 判断是否匹配目标元素\r\n  if (target.nodeName.toLocaleLowerCase === ''li'') {\r\n    console.log(''the content is: '', target.innerHTML);\r\n  }\r\n});\r\n</code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>JavaScript</span></div></div>	\r\n				</div>\r\n<p class="title_p">在上述代码中，我们将点击事件绑定到<code>ul</code>，然后在执行事件的时候再去匹配判断目标元素，减少了大量的内存消耗，尽管后续可能会有js动态操作DOM，增加或删除<code>li</code>元素，都不影响它绑定的点击事件</p>\r\n<h2 class="title_h2">简单demo</h2>\r\n	<div class="code-toolbar">\r\n<pre class="line-numbers language-javascript">\r\n<code class="language-javascript">\r\n	document.querySelector(''ul'').onclick = function (event) {\r\n  switch (event.target.className) {\r\n    case ''add'':\r\n      let oLi = document.createElement(''li'')\r\n      oLi.innerText = ''我是被添加的li''\r\n      this.appendChild(oLi)\r\n      break;\r\n    case ''remove'':\r\n      this.lastElementChild == event.target ? alert(''请先添加一个元素在操作'') : this.removeChild(this.lastElementChild)\r\n      break;\r\n  }\r\n}\r\n</code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>JavaScript</span></div></div>	\r\n				</div>\r\n<h2 class="title_h2">局限性</h2>\r\n<p class="title_p">事件委托也是有一定局限性的,比如 focus、blur 之类的事件本身没有事件冒泡机制,所以无法委托;mousemove、mouseout 这样的事件，虽然有事件冒泡，但是只能不断通过位置去计算定位，对性能消耗高，因此也是不适合于事件委托的. <a href="https://zhuanlan.zhihu.com/p/26536815" class="title_a" target="_blank">更多资料传送门 >></a></p>', 'JavaScript、js事件委托', 'javascript、前端笔记、js中的事件委托', 'js事件委托就是利用事件冒泡，可以自动绑定动态添加的元素，不需要对每一个子元素绑定事件，只需要在父元素上绑定事件，如此，减少了操作DOM节点的次数，可以减少函数所占内存的空间，提高性能'),
(8, 2, 0, 0, 0, '		<h2 class="title_h2">JSON的定义</h2>\r\n		<p class="title_p">JSON(JavaScript Object Notation) 是一种轻量级的数据交换格式，采用完全独立于语言的文本格式，是理想的数据交换格式。JSON在传输过程中是以文本形式存在的，即字符串的形式，JSON 比 XML 更小、更快，更易解析。</p>\r\n							<div class="code-toolbar">\r\n<pre class="line-numbers language-javascript">\r\n<code class="language-javascript">\r\nvar json = {\r\n  "name" : "feixiaobo",\r\n  "age" : 20,\r\n  "school" :{\r\n  	"name" : "大学名",\r\n  	"add" : "中国"\r\n  },\r\n  "fn" : function(){alert(22)}\r\n}\r\n</code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>JavaScript</span></div></div>\r\n				</div>\r\n<h2 class="title_h2">JSON解析与序列化</h2>\r\n<p class="title_p">\r\nJSON 通常用于与服务端交换数据,在接收服务器数据时一般是字符串。json对象有两个方法<code>stringify</code>和<code>parse</code>，它们分别是把js对象序列化成json字符串，和把json字符串转换成js对象，可以用这两个方法解析或传递服务端的数据。\r\n</p>\r\n				<div class="code-toolbar">\r\n<pre class="line-numbers language-javascript">\r\n<code class="language-javascript">\r\n	//json stringify\r\nvar  a ={\r\n      name:"feixiaobo",\r\n      age:20\r\n};\r\nvar bb = JSON.stringify(a);\r\nconsole.log(bb); //打印出{"name":"feixiaobo","age":20}\r\n//json parse\r\nvar obj = JSON.parse(''{ "name":"baidu", "site":"www.baidu.com" }'');\r\nobj.name   //baidu\r\nobj.site   //www.baidu.com\r\n</code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>JavaScript</span></div></div>\r\n				</div>\r\n				<h2 class="title_h2">JSON应用在ajax上</h2>\r\n	<div class="code-toolbar">\r\n<pre class="line-numbers language-javascript">\r\n<code class="language-javascript">\r\n	/*从服务端接收数组的 JSON 数据*/\r\nvar xmlhttp = new XMLHttpRequest();\r\nxmlhttp.onreadystatechange = function() {\r\n    if (this.readyState == 4 && this.status == 200) {\r\n        myObj = JSON.parse(this.responseText);\r\n        document.getElementById("demo").innerHTML = myObj.name;\r\n    }\r\n};\r\nxmlhttp.open("GET", "/ajax/json_demo.php", true);\r\nxmlhttp.send();\r\n</code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>JavaScript</span></div></div>\r\n				</div>', 'JavaScript、js json', 'javascript、前端笔记、js中的json', 'Json 数据格式为key / value, json对象保存在大括号里，{"name" : "baidu","url" : "www.baidu.com"}, js内置函数阔以将json字符串和js'),
(9, 4, 0, 0, 0, '	<h2 class="title_h2">Js伪数组(类数组)介绍</h2>\r\n		<p class="title_p">伪数组我们可以理解为类似数组的一个集合。它像数组一样具有<code>length</code>属性，也可以通过索引（下标）获取元素，常见的伪数组有<code>arguments</code>对象、DOM对象列表。像调用getElementsByTagName,document.childNodes之类的,它们都返回NodeList对象都属于伪数组</p>\r\n							<div class="code-toolbar">\r\n<pre class="line-numbers language-javascript">\r\n<code class="language-javascript">\r\nfunction f(a,b,c){\r\n	console.log(arguments);\r\n}\r\nf(1,2,3);\r\n/* Arguments(3) [1, 2, 3, callee: ƒ, Symbol(Symbol.iterator): ƒ]\r\n * 0:1\r\n * 1:2\r\n * 2:3\r\n * callee:ƒ f(a,b,c)\r\n * length:3\r\n * Symbol(Symbol.iterator):ƒ values()\r\n * __proto__:Object\r\n*/\r\n</code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>JavaScript</span></div></div>\r\n				</div>\r\n<h2 class="title_h2">伪数组的特点</h2>\r\n<p class="title_p">\r\n1. 具有length属性<br/>2. 按索引方式存储数据<br/>3. 不具有数组的push，pop等实例方法\r\n</p>\r\n				<div class="code-toolbar">\r\n<pre class="line-numbers language-javascript">\r\n<code class="language-javascript">\r\nvar fakeArray = {\r\n    length: 3,\r\n    "0": "first",\r\n    "1": "second",\r\n    "2": "third"\r\n};\r\nvar a = ["a","b","c"];\r\n//false, fakeArray不是原生Array对象的实例\r\nconsole.log(fakeArray instanceof Array)\r\n//false, 使用Array的静态方法检测该对象是不是数组\r\nconsole.log(Array.isArray(fakeArray))\r\n//fakeArray.join is not a function\r\nfakeArray.join(''-'');\r\n//true\r\nconsole.log(a instanceof Array)\r\n//true\r\nconsole.log(Array.isArray(a))\r\n</code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>JavaScript</span></div></div>\r\n				</div>\r\n				<h2 class="title_h2">将伪数组转换成数组</h2>\r\n				<p class="title_p">可以使用 Array.prototype.slice.call(arguments)来将一个伪数组转化成数组，一种"嫁接"技术，将数组的原生方法内部this指向伪数组对象来调用该方法</p>\r\n	<div class="code-toolbar">\r\n<pre class="line-numbers language-javascript">\r\n<code class="language-javascript">\r\nvar arr = Array.prototype.slice.call(arguments, 0); // 将arguments对象转换成一个真正的数组\r\n</code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>JavaScript</span></div></div>\r\n				</div>', 'JavaScript、js伪数组', 'javascript、前端笔记、js中的伪数组', '什么是伪数组？obj instanceof Array==false，它具有length属性，可以通过下标获取元素，但是不能用数组的原生方法，foreach等，但可以通过Array.prototype'),
(10, 14, 11, 4, 5, '<h2 class="title_h2">什么是跨域？</h2>\r\n		<p class="title_p">跨域是指一个域下的文档或脚本试图去请求另一个域下的资源，域名、端口、协议任一不同，都是跨域。跨域问题是由于javascript语言安全限制中的同源策略造成的同源策略设计之初是为了安全，所以现代浏览器均推行同源策略，不过想要实现跨域请求，还是有解决办法的。</p>\r\n		<h2 class="title_h2">解决方案</h2>\r\n		<p class="title_p"><i class="iconfont title_i">&#xe666;</i> 使用JSONP</p>\r\n		<p class="title_p">什么是JSONP？JSONP是数据格式JSON的一种“使用模式”，利用script元素开放策略，网页可以从其他来源动态产生的JSON数据。JSONP由两部分组成：回调函数和数据。回调函数是当响应到来时应该在页面中调用的函数，而数据就是传入回调函数中的JSON数据。</p>\r\n				<div class="code-toolbar">\r\n<pre class="line-numbers language-javascript">\r\n<code class="language-javascript">\r\n	//jquery ajax\r\n$.ajax({\r\n    url: ''http://www.xxxxxx.com/login'',\r\n    type: ''GET'',\r\n    dataType: ''jsonp'',  // 请求方式为jsonp\r\n    jsonp: ''jsoncallback'',   //传递的参数，默认为callback\r\n    jsonpCallback: "handleCallback",    // 自定义回调函数名\r\n    data: {},\r\n    success: function(data){ \r\n                handleCallback(data);\r\n            },\r\n            error: function(xmlHttpRequest,textStatus,error){ \r\n                console.log(xmlHttpRequest.status);\r\n                console.log(textStatus);\r\n            }\r\n});\r\n//自定义回调函数\r\nfunction handleCallback(data){\r\n	console.log(data);\r\n}\r\n</code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>JavaScript</span></div></div>							\r\n				</div>\r\n				<p class="title_p">后台拿到参数，包裹返回</p>\r\n	<div class="code-toolbar">\r\n<pre class="line-numbers language-php">\r\n<code class="language-php">\r\n&lt;?php \r\n    //header("Access-Control-Allow-Origin: *");\r\n    //header("Access-Control-Allow-Origin: 我的域或ip");\r\n    \r\n    // 接收数据\r\n     $jsoncallback = htmlspecialchars($_GET["jsoncallback"]);\r\n\r\n    // 查询数据\r\n    //code...\r\n    $res[]=array("xxx" => "xx",...);\r\n    \r\n    //返回jsonp格式的数据\r\n     $data = $jsoncallback . "(" . json_encode($res) . ")";\r\n    \r\n    //$data = json_encode($res);\r\n    echo $data;\r\n?&gt;\r\n</code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>PHP</span></div></div>	\r\n		</div>\r\n	<p class="title_p">服务端返回数据</p>\r\n		<div class="code-toolbar">\r\n<pre class="line-numbers language-javascript">\r\n<code class="language-javascript">\r\nhandleCallback({''xxx'':''xx'',...});\r\n</code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>JavaScript</span></div></div>	\r\n		</div>\r\n		<p class="title_p">jquery还有一种常见的方法就是使用$.getJSON获取，直接给出一个网址，写法如下</p>\r\n				<div class="code-toolbar">\r\n<pre class="line-numbers language-javascript">\r\n<code class="language-javascript">\r\n$.getJSON(''http://www.xxxxxx.com/login.php?jsoncallback=?'',function(data){ \r\n            handleCallback(data);\r\n        });\r\n</code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>JavaScript</span></div></div>	\r\n		</div>\r\n		<p class="title_p">如果不指定$.ajax方法中的jsonpCallback参数，jquery会自动生成一个全局函数来替换callback=?中的问号，之后获取到数据后又会自动销毁，实际上就是起一个临时代理函数的作用。$.getJSON方法会自动判断是否跨域，不跨域的话，就调用普通的ajax方法；跨域的话，则会以异步加载js文件的形式来调用jsonp的回调函数。</p>\r\n		<p class="title_p"><strong>JSONP的优缺点</strong></p>\r\n		<p class="title_p">优点：<br/><i class="iconfont title_i">&#xe666;</i> 它不像XMLHttpRequest对象实现的Ajax请求那样受到同源策略的限制，JSONP可以跨越同源策略<br/>\r\n		<i class="iconfont title_i">&#xe666;</i> 它的兼容性更好，在更加古老的浏览器中都可以运行，不需要XMLHttpRequest或ActiveX的支持<br/>\r\n		<i class="iconfont title_i">&#xe666;</i> 在请求完毕后可以通过调用callback的方式回传结果。将回调方法的权限给了调用方。\r\n		</p>\r\n		<p class="title_p">缺点：<br/><i class="iconfont title_i">&#xe666;</i> 它只支持GET请求而不支持POST等其它类型的HTTP请求<br/>\r\n			<i class="iconfont title_i">&#xe666;</i> 它只支持跨域HTTP请求这种情况，不能解决不同域的两个页面之间如何进行JavaScript调用的问题。<br/>\r\n			 <i class="iconfont title_i">&#xe666;</i> jsonp在调用失败的时候不会返回各种HTTP状态码。\r\n		</p><br/>\r\n		<p class="title_p"><i class="iconfont title_i">&#xe666;</i>跨域资源共享（CORS）</p>\r\n		<p class="title_p">解决jsonp缺点 支持get post put delet请求，安全性高,只服务端设置Access-Control-Allow-Origin即可，前端无须设置。</p>\r\n			<div class="code-toolbar">\r\n<pre class="line-numbers language-javascript">\r\n<code class="language-javascript">\r\nvar xhr = new XMLHttpRequest(); // IE8/9需用window.XDomainRequest兼容\r\n\r\n// 前端设置是否带cookie\r\nxhr.withCredentials = true;\r\n\r\nxhr.open(''post'', ''http://www.domain2.com:8080/login'', true);\r\nxhr.setRequestHeader(''Content-Type'', ''application/x-www-form-urlencoded'');\r\nxhr.send(''user=admin'');\r\n\r\nxhr.onreadystatechange = function() {\r\n    if (xhr.readyState == 4 && xhr.status == 200) {\r\n        alert(xhr.responseText);\r\n    }\r\n};\r\n\r\n\r\n//jq\r\n$.ajax({\r\n    ...\r\n   xhrFields: {\r\n       withCredentials: true    // 前端设置是否带cookie\r\n   },\r\n   crossDomain: true,   // 会让请求头中包含跨域的额外信息，但不会含cookie\r\n    ...\r\n});\r\n</code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>JavaScript</span></div></div>	\r\n		</div>\r\n		<p class="title_p">服务端设置</p>\r\n	<div class="code-toolbar">\r\n<pre class="line-numbers language-php">\r\n<code class="language-php">\r\n&lt;?php \r\n    header(Access-Control-Allow-Origin: www.baidu.com);  //允许百度这个域下的请求，可以配置多个域，以逗号隔开，还能设置为*（*代表所有域都能请求但是origin写*不能允许携带cookie凭证）\r\n	header(Access-Control-Allow-Methods: POST,GET,PUT,DELETE);  // 允许哪些方法，以逗号隔开\r\n	header(Access-Control-Allow-Headers: name,token);   // 表示服务器支持name和token字段\r\n	header(Access-Control-Allow-Credentials: true);  // 允许cookie跨域\r\n	header(Access-Control-Max-Age: 6);   // 预检请求的有效期，单位为秒，相当于把预检请求缓存下来，下次直接发送正式请求，不用再去预检是否服务器支持该请求方法\r\n	header(Access-Control-Expose-Headers: token);  // 允许用js获取响应头里的token值\r\n	header(Access-Control-Request-Headers: token);  //指定浏览发送请求时，需要带上的额外请求头\r\n?&gt;\r\n</code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>PHP</span></div></div>	\r\n		</div>\r\n		<p class="title_p"><i class="iconfont title_i">&#xe666;</i> postMessage跨域</p>\r\n		<p class="title_p">postMessage是HTML5 XMLHttpRequest Level 2中的API,它可用于多窗口之间消息传递，页面与嵌套的iframe消息传递等，用法：postMessage(需要传递的参数, 目标源)</p>\r\n		<div class="code-toolbar">\r\n<pre class="line-numbers language-javascript">\r\n<code class="language-javascript">\r\n&lt;iframe id="iframe" src="http://www.domain2.com/b.html" style="display:none;"&gt;&lt;/iframe&gt;\r\n&lt;script&gt;  \r\n    var iframe = document.getElementById(''iframe'');\r\n    iframe.onload = function() {\r\n        var data = {\r\n            name: ''aym''\r\n        };\r\n        // 向domain2传送跨域数据\r\n        iframe.contentWindow.postMessage(JSON.stringify(data), ''http://www.domain2.com'');\r\n    };\r\n\r\n    // 接受domain2返回数据\r\n    window.addEventListener(''message'', function(e) {\r\n        alert(''data from domain2 ---> '' + e.data);\r\n    }, false);\r\n&lt;/script&gt;\r\n</code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>JavaScript</span></div></div>	\r\n		</div>\r\n<div class="code-toolbar">\r\n<pre class="line-numbers language-javascript">\r\n<code class="language-javascript">\r\n&lt;script&gt;\r\n    // 接收domain1的数据\r\n    window.addEventListener(''message'', function(e) {\r\n        alert(''data from domain1 ---> '' + e.data);\r\n\r\n        var data = JSON.parse(e.data);\r\n        if (data) {\r\n            data.number = 16;\r\n\r\n            // 处理后再发回domain1\r\n            window.parent.postMessage(JSON.stringify(data), ''http://www.domain1.com'');\r\n        }\r\n    }, false);\r\n&lt;script&gt;\r\n</code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>JavaScript</span></div></div>	\r\n		</div>', 'JavaScript、js跨域请求', 'javascript、前端笔记、js跨域 ', 'js利用ajax通过XMLHttpRequest对象可以异步请求后台数据，但是由于浏览器的"同源策略",不能实现跨域请求，那么我将介绍几种常用的方法来实现如何做到跨域请求。方法一. 目标域服务器设置A'),
(11, 3, 4, 7, 0, '	<h2 class="title_h2"><span class="title_span"><strong>什么是HTML5？</strong></span></h2>\r\n	<p class="title_p">HTML5 是 HTML 最新的修订版本,由万维网联盟（W3C）于 2014 年 10 月完成标准制定。</p>\r\n	<p class="title_p">HTML5 将成为 HTML、XHTML 以及 HTML DOM 的新标准。</p>\r\n	<p class="title_p">HTML5添加了许多新的语法特征,提供更多能有效加强网络应用的标准集。</p>\r\n	<h2 class="title_h2"><span class="title_span"><strong>HTML5是如何起步的?</strong></span></h2>\r\n	<p class="title_p">HTML5 是 W3C 与 WHATWG 合作的结果。</p>\r\n	<p class="title_p">编者注：W3C 指 World Wide Web Consortium，万维网联盟。</p>\r\n	<p class="title_p">编者注：WHATWG 指 Web Hypertext Application Technology Working Group。</p>\r\n	<p class="title_p">WHATWG 致力于 web 表单和应用程序，而 W3C 专注于 XHTML 2.0。在 2006 年，双方决定进行合作，来创建一个新版本的 HTML。</p>\r\n	<h2 class="title_h2"><span class="title_span"><strong>HTML5开头声明</strong></span></h2>\r\n	<p class="title_p">&lt;!doctype html&gt;</p>\r\n	<p class="title_p">&lt;meta charset=”utf-8″&gt;</p>\r\n	<h2 class="title_h2"><span class="title_span"><strong>HTML5新增语义化标签</strong></span></h2>\r\n	<p class="title_p">\r\n		&lt;section&gt;&lt;/section&gt;&nbsp;----用于对网站或应用程序中页面上的内容进行分块。<br/>\r\n		&lt;article&gt;&lt;/article&gt;&nbsp;----代表文档、页面或应用程序中独立的、完整的内容。<br/>\r\n		&lt;aside&gt;&lt;/aside&gt;&nbsp;----表示当前页面或者文章的附属信息部分。<br/>\r\n		&lt;nav&gt;&lt;/nav&gt;&nbsp;----用作页面导航的链接组。<br/>\r\n		&lt;time&gt;&lt;/time&gt;&nbsp;----表示某个时间或者某个日期。<br/>\r\n		&lt;header&gt;&lt;/header&gt;&nbsp;----整个页面或者页面内容区块的标题，可以包含其他内容。<br/>\r\n		&lt;footer&gt;&lt;/footer&gt;&nbsp;----页脚，页面底部或者版块的内容。<br/>\r\n		&lt;address&gt;&lt;/address&gt;&nbsp;----文档作者或者文档维护者的联系信息。\r\n	</p>\r\n	<h2 class="title_h2"><span class="title_span"><strong>HTML5新增元素</strong></span></h2>\r\n	<p class="title_p">\r\n	&lt;canvas&gt;&nbsp;----绘制图形标签<br/>\r\n	&lt;video&gt;&nbsp;----页面中插入视频<br/>\r\n	&lt;audio&gt;&nbsp;----页面中插入音频<br/>\r\n	&lt;ruby&gt;&nbsp;----标记定义 注释或音标<br/>\r\n	&lt;mark&gt;&nbsp;----标记文本<br/>\r\n	&lt;progress&gt;&nbsp;----标签标示任务的进度（进程）\r\n	</p>\r\n	<h2 class="title_h2"><span class="title_span"><strong>HTML5废除元素</strong></span></h2>\r\n	<p class="title_p"><strong>纯表现</strong></p>\r\n	<p class="title_p">basefont，big，center，font, s，strike，tt，u；</p>\r\n	<p class="title_p"><strong>会产生负面影响</strong></p>\r\n	<p class="title_p">frame，frameset，noframes；</p>\r\n	<p class="title_p"><strong>产生混淆</strong></p>\r\n	<p class="title_p">acronym ，applet，isindex，dir</p>', 'HTML5、历史与介绍', 'html5、前端笔记、h5介绍', '什么是HTML5?即超文本标记语言修订版 5，是万维网内容的结构和表示的标记语言。HTML5 支持传统的 HTML 和 XHTML 样式语法以及其标记，新 API，XHTML 和错误处理中的其他新功能'),
(12, 2, 0, 1, 0, '<h2 class="title_h2">方法一</h2>\r\n		<p class="title_p">固定定位或者绝对定位，确定宽高设置margin属性为宽高的负一半。</p>\r\n		<div class="code-toolbar">\r\n<pre class="language-css line-numbers">\r\n<code class="language-css">\r\ndiv{\r\n	position:fixed;\r\n	width:200px;\r\n	height:100px;\r\n	left:50%;\r\n	top:50%;\r\n	margin-left:-100px;\r\n	margin-top:-50px;\r\n}\r\n</code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>CSS</span></div></div>\r\n				</div>\r\n	<h2 class="title_h2">方法二</h2>\r\n		<p class="title_p">固定定位或者绝对定位，不确定宽高，使用transform：translate属性。</p>\r\n		<div class="code-toolbar">\r\n<pre class="language-css line-numbers">\r\n<code class="language-css">\r\ndiv{\r\n	position:fixed;\r\n	width:200px;\r\n	height:100px;\r\n	left:50%;\r\n	top:50%;\r\n	transform:translate(-50%,-50%);\r\n}\r\n</code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>CSS</span></div></div>\r\n				</div>\r\n				<h2 class="title_h2">方法三</h2>\r\n		<p class="title_p">固定定位或者绝对定位，设置left，right，top，bottom属性值为0;margin设置为auto。</p>\r\n		<div class="code-toolbar">\r\n<pre class="language-css line-numbers">\r\n<code class="language-css">\r\ndiv{\r\n	position:fixed;\r\n	width:200px;\r\n	height:100px;\r\n	left:0;\r\n	top:0;\r\n	bottom:0;\r\n	right:0;\r\n	margin:auto;\r\n}\r\n</code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>CSS</span></div></div>\r\n				</div>\r\n	<h2 class="title_h2">方法四</h2>\r\n		<p class="title_p">父级设置flex布局属性</p>\r\n		<div class="code-toolbar">\r\n<pre class="language-html line-numbers">\r\n<code class="language-html">\r\n&lt;div class="father"&gt;\r\n			&lt;div class="son"&gt;&lt;/div&gt;\r\n		&lt;/div&gt;\r\n</code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>HTML</span></div></div>\r\n				</div>\r\n		<div class="code-toolbar">\r\n<pre class="language-css line-numbers">\r\n<code class="language-css">\r\n.father{\r\n	display:flex;\r\n	width:100%;\r\n	height:200px;\r\n	justify-content:center;\r\n	align-items:center;\r\n	background: lightcoral;\r\n}\r\n.son{\r\n	height: 100px;\r\n	width: 100px;\r\n	background: lightblue;\r\n}\r\n</code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>CSS</span></div></div>\r\n				</div>\r\n		<h2 class="title_h2">方法五</h2>\r\n		<p class="title_p">父级设置table-cell</p>\r\n		<div class="code-toolbar">\r\n<pre class="language-css line-numbers">\r\n<code class="language-css">\r\n.father{\r\n	display: table-cell;\r\n	width: 200px;\r\n	height: 200px;\r\n	background: #ddd;\r\n	vertical-align: middle;\r\n	text-align: center;\r\n}\r\n.son{\r\n	display:inline-block;\r\n	height: 100px;\r\n	width: 100px;\r\n	background: lightblue;\r\n}\r\n</code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>CSS</span></div></div>\r\n				</div>', 'css水平垂直居中', 'css、前端笔记、css居中', '在网站开发过程中，经常会碰到这样的需求，例如：DIV盒子等等模块设置成左右上下居中，可见掌握这一技能是非常有必要的！那么如何操作呢？接着往下看，要实现这种效果有五种方法。'),
(13, 1, 0, 0, 0, '<h2 class="title_h2">弹性盒模型布局（转自阮一峰）<a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html" class="title_a" target="_blank">更多资料传送门 &gt;&gt;</a></h2>\r\n		<p class="title_p">display:flex 是一种布局方式。它即可以应用于容器中，也可以应用于行内元素。是W3C提出的一种新的方案，可以简便、完整、响应式地实现各种页面布局。目前，它已经得到了所有浏览器的支持。Flex是Flexible Box的缩写，意为"弹性布局"，用来为盒状模型提供最大的灵活性。设为Flex布局以后，子元素的<code>float</code>、<code>clear</code>和<code>vertical-align</code>属性将失效。</p>\r\n		<h2 class="title_h2">flex的六个属性</h2>\r\n		<p class="title_p"><i class="iconfont title_i">&#xe666;</i> flex-direction 容器内元素的排列方向（默认横向排列）</p>\r\n		<p class="title_p">1：flex-direction:row; 沿水平主轴让元素从左向右排列<br/><br/><div class="text-center"><img src="img/flex1.png" alt="" /></div></p>\r\n		<p class="title_p">2：flex-direction:column; 让元素沿垂直主轴从上到下垂直排列<br/><br/><div class="text-center"><img src="img/flex2.png" alt="" /></div></p>\r\n		<p class="title_p">3：flex-direction:row-reverse;沿水平主轴让元素从右向左排列<br/><br/><div class="text-center"><img src="img/flex3.png" alt="" /></div></p>\r\n		<p class="title_p">4：flex-direction:column-reverse;让元素沿垂直主轴从下到上垂直排列<br/><br/><div class="text-center"><img src="img/flex4.png" alt="" /></div></p>\r\n		<p class="title_p"><i class="iconfont title_i">&#xe666;</i> flex-wrap 定义如果一条轴线排不下，如何换行</p>\r\n		<p class="title_p">1：flex-wrap: nowrap（默认）不换行<br/><br/><div class="text-center"><img src="img/flex1.png" alt="" /></div></p>\r\n		<p class="title_p">2：flex-wrap: wrap 换行，第一行在上面<br/><br/><div class="text-center"><img src="img/flex5.png" alt="" /></div></p>\r\n		<p class="title_p">3：flex-wrap: wrap-reverse 换行，第一行在下面<br/><br/><div class="text-center"><img src="img/flex6.png" alt="" /></div></p>\r\n		<p class="title_p"><i class="iconfont title_i">&#xe666;</i> justify-content 定义项目在主轴上的对齐方式</p>\r\n		<div class="code-toolbar">\r\n<pre class="language-css line-numbers">\r\n<code class="language-css">\r\n.father {\r\n  justify-content: flex-start | flex-end | center | space-between | space-around;\r\n}\r\n</code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>CSS</span></div></div>\r\n				</div>\r\n				<p class="title_p text-center"><img src="img/flex7.png"/></p>\r\n				<p class="title_p"><i class="iconfont title_i">&#xe666;</i> align-items属性定义项目在交叉轴上如何对齐</p>\r\n						<div class="code-toolbar">\r\n<pre class="language-css line-numbers">\r\n<code class="language-css">\r\n.father {\r\n  align-items: flex-start | flex-end | center | baseline | stretch;\r\n}\r\n\r\n/* flex-start：交叉轴的起点对齐。\r\n   flex-end：交叉轴的终点对齐。\r\n   center：交叉轴的中点对齐。\r\n   baseline: 项目的第一行文字的基线对齐。\r\n   stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。\r\n   */\r\n</code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>CSS</span></div></div>\r\n				</div>\r\n				<p class="title_p text-center"><img src="img/flex8.png"/></p>\r\n				<p class="title_p"><i class="iconfont title_i">&#xe666;</i> align-content属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。</p>\r\n				<div class="code-toolbar">\r\n<pre class="language-css line-numbers">\r\n<code class="language-css">\r\n.father {\r\n  align-content: flex-start | flex-end | center | space-between | space-around | stretch;\r\n}\r\n\r\n/* flex-start：与交叉轴的起点对齐。\r\n   flex-end：与交叉轴的终点对齐。\r\n   center：与交叉轴的中点对齐。 \r\n   space-between：与交叉轴两端对齐，轴线之间的间隔平均分布。\r\n   space-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。\r\n   stretch（默认值）：轴线占满整个交叉轴。\r\n   */\r\n</code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>CSS</span></div></div>\r\n				</div>\r\n				<p class="title_p text-center"><img src="img/flex9.png"/></p>\r\n	<h2 class="title_h2">一张图直观了解</h2>\r\n	<p class="title_p"><img src="img/flex10.jpg" alt="" /></p>\r\n	<div><a href="flex_demo.html" class="sharebtn" target="_blank">DEMO展示</a></div>', 'CSS3 flex布局', 'css3、前端笔记、css3中的flex布局', 'display:flex 是一种布局方式。它即可以应用于容器中，也可以应用于行内元素。是W3C提出的一种新的方案，可以简便、完整、响应式地实现各种页面布局。目前，它已经得到了所有浏览器的支持。Flex'),
(14, 1, 0, 0, 0, '<h2 class="title_h2">flex布局实现瀑布流排版</h2>\r\n		<p class="title_p">瀑布流布局基本大家都见过，绝大多数是用于图片上。其实以前想做瀑布流还是不容易的，因为需要去定位，动态计算每张图片位置，于是就很多人做了类似的jq插件，例如：插件（Masonry，Wookmark等等）。按照正常的逻辑思维，瀑布流的排版（item列表）一般都是 由左到右，上而下排序的结果，单纯的css实现这一点有些困难 ，下面分享一款由flex布局实现的瀑布流效果，虽然效果难以达到有些插件的效果，但也算是简单实用吧。</p>\r\n		<div class="code-toolbar">\r\n<pre class="language-html line-numbers">\r\n<code class="language-html">\r\n&lt;!DOCTYPE html&gt;\r\n&lt;html&gt;\r\n&lt;head&gt;\r\n&lt;meta charset="utf-8"&gt;\r\n&lt;meta content="width=device-width,initial-scale=1.0,maximum-scale=1.0,user-scalable=no" name="viewport"&gt;\r\n&lt;style type="text/css"&gt;\r\n.masonary{\r\n                width: 100%;\r\n                display: flex;\r\n                flex-direction: column;\r\n                height: auto;\r\n            }\r\n            @media only screen and (min-width: 500px) { \r\n                .masonary { flex-direction: row; } \r\n            }\r\n            \r\n            .clumn{\r\n                margin-left: 0.5rem;\r\n                display: flex; \r\n                flex-flow: column wrap; \r\n                width: 100%;\r\n            }\r\n            @media only screen and (max-width: 500px) { \r\n                .clumn { width: 100%;max-width: 95%;margin: auto; } \r\n            }\r\n            \r\n            .clumn&gt;.item&gt;.item__content{\r\n            	display: flex;\r\n            	justify-content: center;\r\n            	align-items: center;\r\n                margin-bottom: 0.5rem;\r\n                color: #666;\r\n                padding: 2rem;\r\n                \r\n            }\r\n&lt;/style&gt;\r\n&lt;/head&gt;\r\n&lt;body&gt;\r\n\r\n   &lt;div class="masonary"&gt;\r\n            &lt;div class="clumn"&gt;\r\n                &lt;div class="item"&gt; \r\n                    &lt;div class="item__content" style="background: lightblue;"&gt;窗透初晓 日照西桥 云自摇 想你当年荷风微摆的衣角 木雕流金 岁月涟漪 七年前封笔 因为我今生挥毫旁 &lt;/div&gt; \r\n                    &lt;div class="item__content" style="background: orange;"&gt;窗透初晓 日照西桥 云自摇 想你当年荷风微摆的衣角 木雕流金 岁月涟漪 七年前封笔 因为我今生挥毫只为你 雨打湿了眼眶 年年倚井盼归堂&lt;/div&gt; \r\n                &lt;/div&gt;\r\n            &lt;/div&gt;\r\n            &lt;div class="clumn"&gt;\r\n                &lt;div class="item"&gt; \r\n                    &lt;div class="item__content" style="background: lightblue;"&gt;窗透初晓 日照西桥 云自摇 想你当年荷风微摆的衣角 木雕流金 岁月涟漪 七年前封笔 因为我今生挥毫只为你 雨打湿了眼眶 年年倚井盼归堂 最怕不觉泪已&lt;/div&gt; \r\n                    &lt;div class="item__content" style="background: lightsteelblue;"&gt;窗透初晓 日照西桥 云自摇 想你当年荷风微摆的衣角 木雕流金 岁月涟漪 七年前封笔 因为我今生挥毫只为你 雨打湿了眼眶 年年倚井盼归堂 &lt;/div&gt; \r\n                &lt;/div&gt;\r\n            &lt;/div&gt;\r\n            &lt;div class="clumn"&gt;\r\n                &lt;div class="item"&gt; \r\n                    &lt;div class="item__content" style="background: lightcyan;"&gt;窗透初晓 日照西桥 云自摇 想你当年荷风微摆的衣角 &lt;/div&gt; \r\n                &lt;/div&gt;\r\n            &lt;/div&gt;\r\n        &lt;/div&gt;\r\n\r\n&lt;/body&gt;\r\n&lt;/html&gt;\r\n</code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>HTML</span></div></div>\r\n				</div>\r\n				<h2 class="title_h2">效果</h2>\r\n				<p class="title_p text-center"><img src="img/flex11.png"/></p>', 'CSS3 flex瀑布流', 'css3、前端笔记、css3中的flex瀑布流', '瀑布流布局基本大家都见过，绝大多数是用于图片上。其实以前想做瀑布流还是不容易的，因为需要去定位，动态计算每张图片位置，于是就很多人做了类似的jq插件，例如：插件（Masonry，Wookmark等等）'),
(15, 1, 0, 0, 0, '<h2 class="title_h2">取值</h2>\r\n		<p class="title_p">none：无倒影；<br/>\r\n			<span class="orange"><strong>direction：</strong></span><br/>\r\n			above：倒影在对象上方；<br/>\r\n			below：指定倒影在对象的下边；<br/>\r\n			left：指定倒影在对象的左边；<br/>\r\n			right：指定倒影在对象的右边；<br/>\r\n			<span class="orange"><strong>offset：</strong></span><br/>\r\n			定义倒影与对象之间的间隔（可用单位：px 百分比，可以为负值）<br/>\r\n			<span class="orange"><strong>mask-box-image：</strong></span><br/>\r\n			none:无遮罩图像<br/>\r\n			url：使用绝对或相对地址指定遮罩图像；<br/>\r\n			linear-gradient：使用线性渐变创建遮罩图像；<br/>\r\n			radial-gradient：使用径向(放射性)渐变创建遮罩图像；<br/>\r\n			repeating-linear-gradient：使用重复的线性渐变创建背遮罩像；<br/>\r\n			repeating-radial-gradient：使用重复的径向(放射性)渐变创建遮罩图像。<br/>\r\n			<span class="orange"><strong>示例：</strong></span><br/>\r\n		</p>\r\n		<div class="code-toolbar">\r\n<pre class="language-css line-numbers">\r\n<code class="language-css">\r\n-webkit-box-reflect:below 0 -webkit-linear-gradient(transparent,transparent 50%,rgba(255,255,255,.3));\r\n</code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>CSS</span></div></div>\r\n				</div>\r\n				<h2 class="title_h2">效果</h2>\r\n				<p class="title_p text-center"><img src="img/shadow.png"/></p>\r\n				<p class="title_p"><span class="orange"><strong>各浏览器兼容支持情况：</strong></span><br/>\r\n					<div class="text-center"><img src="img/support.png" alt="" /></div>\r\n				</p>', 'CSS3 box-reflect', 'css3、前端笔记、css3中的倒影属性', '取值： direction： above：倒影想上方； below：倒影在下方； left：倒影在左边； right：倒影在右边。 offset： 可用单位：px 百分比 mask-box-image'),
(16, 1, 0, 0, 0, '<h2 class="title_h2">text-overflow</h2>\r\n		<p class="title_p"><i class="iconfont title_i">&#xe666;</i> 定义文本溢出时所做的事，结合white-space、overflow属性一同使用，分别有3个值：<br/>\r\n			clip：超出时裁剪文本<br/>\r\n			<img src="img/clip.png"/><br/>\r\n			ellipsis：超出时显示省略号<br/>\r\n			<img src="img/ellipsis.png"/><br/>\r\n			inherit:<br/>\r\n			<i class="iconfont title_i">&#xe666;</i> 各浏览器兼容情况<br/><br/>\r\n			<img src="img/textover.png"/><br/>\r\n			<h2 class="title_h2">word-break</h2>\r\n			<p class="title_p">\r\n				<i class="iconfont title_i">&#xe666;</i> 规定文本换行的规则，有3个值：<br/>\r\n				normal：浏览器默认换行规则<br/>\r\n				<img src="img/word.png"/><br/>\r\n				<img src="img/wenzi.png"/><br/>\r\n				break-all：允许在单词内换行，支持中文换行<br/>\r\n				<img src="img/wenzi1.png"/><br/>\r\n				<img src="img/wenzi.png" alt="" /><br/>\r\n				keep-all：只能在半角空格和连接字符换行<br/>\r\n				<img src="img/wenzi2.png"/><br/>\r\n				<i class="iconfont title_i">&#xe666;</i> 各浏览器兼容情况<br/><br/>\r\n				<img src="img/wordbreak.png"/>\r\n			</p>\r\n			<h2 class="title_h2">word-wrap</h2>\r\n			<p class="title_p">\r\n				<i class="iconfont title_i">&#xe666;</i> 允许将长单词或这url地址进行换行，两个值：<br/>\r\n				normal:浏览器默认规则<br/>\r\n				<img src="img/wenzi3.png"/><br/>\r\n				强制换行文本<br/>\r\n				<img src="img/wenzi4.png"/><br/>\r\n				<i class="iconfont title_i">&#xe666;</i> 各浏览器兼容情况<br/><br/>\r\n				<img src="img/wordwrap.png"/>\r\n			</p>', 'css3新增文本属性', 'css3、前端笔记、css3中的文本属性', 'text-overflow 定义文本溢出时所做的事，结合white-space、overflow属性一同使用，分别有3个值：    clip：超出时裁剪文本    ellipsis：超出时显示省略号 ');
INSERT INTO `article_details` (`details_id`, `details_love`, `details_haha`, `details_wow`, `details_sad`, `details_content`, `details_tag`, `desc_keyword`, `desc_describe`) VALUES
(17, 0, 1, 0, 0, '<div class="table-responsive">\r\n<table class="table table-hover table-striped table-bordered">\r\n<tbody>\r\n<tr>\r\n<th>选择器</th>\r\n<th>示例</th>\r\n<th>示例说明</th>\r\n<th>CSS</th>\r\n</tr>\r\n<tr>\r\n<td><a href="http://www.runoob.com/cssref/sel-class.html" target="_blank">.<i>class</i></a></td>\r\n<td >.intro</td>\r\n<td>选择所有class=”intro”的元素</td>\r\n<td>1</td>\r\n</tr>\r\n<tr>\r\n<td><a href="http://www.runoob.com/cssref/sel-id.html" target="_blank">#<i>id</i></a></td>\r\n<td >#firstname</td>\r\n<td>选择所有id=”firstname”的元素</td>\r\n<td>1</td>\r\n</tr>\r\n<tr>\r\n<td><a href="http://www.runoob.com/cssref/sel-all.html" target="_blank">*</a></td>\r\n<td >*</td>\r\n<td>选择所有元素</td>\r\n<td>2</td>\r\n</tr>\r\n<tr>\r\n<td><i><a href="http://www.runoob.com/cssref/sel-element.html" target="_blank">element</a></i></td>\r\n<td >p</td>\r\n<td>选择所有&lt;p&gt;元素</td>\r\n<td>1</td>\r\n</tr>\r\n<tr>\r\n<td><i><a href="http://www.runoob.com/cssref/sel-element-comma.html" target="_blank">element,element</a></i></td>\r\n<td >div,p</td>\r\n<td>选择所有&lt;div&gt;元素和&lt;p&gt;元素</td>\r\n<td>1</td>\r\n</tr>\r\n<tr>\r\n<td><a href="http://www.runoob.com/cssref/sel-element-element.html" target="_blank"><i>element</i> <i>element</i></a></td>\r\n<td >div p</td>\r\n<td>选择&lt;div&gt;元素内的所有&lt;p&gt;元素</td>\r\n<td>1</td>\r\n</tr>\r\n<tr>\r\n<td><a href="http://www.runoob.com/cssref/sel-element-gt.html" target="_blank"><i>element</i>&gt;<i>element</i></a></td>\r\n<td >div&gt;p</td>\r\n<td>选择所有父级是 &lt;div&gt; 元素的 &lt;p&gt; 元素</td>\r\n<td>2</td>\r\n</tr>\r\n<tr>\r\n<td><a href="http://www.runoob.com/cssref/sel-element-pluss.html" target="_blank"><i>element</i>+<i>element</i></a></td>\r\n<td >div+p</td>\r\n<td>选择所有紧接着&lt;div&gt;元素之后的&lt;p&gt;元素</td>\r\n<td>2</td>\r\n</tr>\r\n<tr>\r\n<td><a href="http://www.runoob.com/cssref/sel-attribute.html" target="_blank">[<i>attribute</i>]</a></td>\r\n<td >[target]</td>\r\n<td>选择所有带有target属性元素</td>\r\n<td>2</td>\r\n</tr>\r\n<tr>\r\n<td><a href="http://www.runoob.com/cssref/sel-attribute-value.html" target="_blank">[<i>attribute</i>=<i>value</i>]</a></td>\r\n<td >[target=-blank]</td>\r\n<td>选择所有使用target=”-blank”的元素</td>\r\n<td>2</td>\r\n</tr>\r\n<tr>\r\n<td><a href="http://www.runoob.com/cssref/sel-attribute-value-contains.html" target="_blank">[<i>attribute</i>~=<i>value</i>]</a></td>\r\n<td >[title~=flower]</td>\r\n<td>选择标题属性包含单词”flower”的所有元素</td>\r\n<td>2</td>\r\n</tr>\r\n<tr>\r\n<td><a href="http://www.runoob.com/cssref/sel-attribute-value-lang.html" target="_blank">[<i>attribute</i>|=<i>language</i>]</a></td>\r\n<td >[lang|=en]</td>\r\n<td>选择一个lang属性的起始值=”EN”的所有元素</td>\r\n<td>2</td>\r\n</tr>\r\n<tr>\r\n<td><a href="http://www.runoob.com/cssref/sel-link.html" target="_blank">:link</a></td>\r\n<td >a:link</td>\r\n<td>选择所有未访问链接</td>\r\n<td>1</td>\r\n</tr>\r\n<tr>\r\n<td><a href="http://www.runoob.com/cssref/sel-visited.html" target="_blank">:visited</a></td>\r\n<td >a:visited</td>\r\n<td>选择所有访问过的链接</td>\r\n<td>1</td>\r\n</tr>\r\n<tr>\r\n<td><a href="http://www.runoob.com/cssref/sel-active.html" target="_blank">:active</a></td>\r\n<td >a:active</td>\r\n<td>选择活动链接</td>\r\n<td>1</td>\r\n</tr>\r\n<tr>\r\n<td><a href="http://www.runoob.com/cssref/sel-hover.html" target="_blank">:hover</a></td>\r\n<td >a:hover</td>\r\n<td>选择鼠标在链接上面时</td>\r\n<td>1</td>\r\n</tr>\r\n<tr>\r\n<td><a href="http://www.runoob.com/cssref/sel-focus.html" target="_blank">:focus</a></td>\r\n<td >input:focus</td>\r\n<td>选择具有焦点的输入元素</td>\r\n<td>2</td>\r\n</tr>\r\n<tr>\r\n<td><a href="http://www.runoob.com/cssref/sel-firstletter.html" target="_blank">:first-letter</a></td>\r\n<td >p:first-letter</td>\r\n<td>选择每一个&lt;P&gt;元素的第一个字母</td>\r\n<td>1</td>\r\n</tr>\r\n<tr>\r\n<td><a href="http://www.runoob.com/cssref/sel-firstline.html" target="_blank">:first-line</a></td>\r\n<td >p:first-line</td>\r\n<td>选择每一个&lt;P&gt;元素的第一行</td>\r\n<td>1</td>\r\n</tr>\r\n<tr>\r\n<td><a href="http://www.runoob.com/cssref/sel-firstchild.html" target="_blank">:first-child</a></td>\r\n<td >p:first-child</td>\r\n<td>指定只有当&lt;p&gt;元素是其父级的第一个子级的样式。</td>\r\n<td>2</td>\r\n</tr>\r\n<tr>\r\n<td><a href="http://www.runoob.com/cssref/sel-before.html" target="_blank">:before</a></td>\r\n<td >p:before</td>\r\n<td>在每个&lt;p&gt;元素之前插入内容</td>\r\n<td>2</td>\r\n</tr>\r\n<tr>\r\n<td><a href="http://www.runoob.com/cssref/sel-after.html" target="_blank">:after</a></td>\r\n<td >p:after</td>\r\n<td>在每个&lt;p&gt;元素之后插入内容</td>\r\n<td>2</td>\r\n</tr>\r\n<tr>\r\n<td><a href="http://www.runoob.com/cssref/sel-lang.html" target="_blank">:lang(<i>language</i>)</a></td>\r\n<td>p:lang(it)</td>\r\n<td>选择一个lang属性的起始值=”it”的所有&lt;p&gt;元素</td>\r\n<td>2</td>\r\n</tr>\r\n<tr>\r\n<td><a href="http://www.runoob.com/cssref/sel-gen-sibling.html" target="_blank"><i>element1</i>~<i>element2</i></a></td>\r\n<td>p~ul</td>\r\n<td>选择p元素之后的每一个ul元素</td>\r\n<td>3</td>\r\n</tr>\r\n<tr>\r\n<td><a href="http://www.runoob.com/cssref/sel-attr-begin.html" target="_blank">[<i>attribute</i>^=<i>value</i>]</a></td>\r\n<td>a[src^="https"]</td>\r\n<td>选择每一个src属性的值以"https"开头的元素</td>\r\n<td>3</td>\r\n</tr>\r\n<tr>\r\n<td><a href="http://www.runoob.com/cssref/sel-attr-end.html" target="_blank">[<i>attribute</i>$=<i>value</i>]</a></td>\r\n<td>a[src$=".pdf"]</td>\r\n<td>选择每一个src属性的值以".pdf"结尾的元素</td>\r\n<td>3</td>\r\n</tr>\r\n<tr>\r\n<td><a href="http://www.runoob.com/cssref/sel-attr-contain.html" target="_blank">[<i>attribute</i>*=<i>value</i>]</a></td>\r\n<td>a[src*="44lan"]</td>\r\n<td>选择每一个src属性的值包含子字符串"44lan"的元素</td>\r\n<td>3</td>\r\n</tr>\r\n<tr>\r\n<td><a href="http://www.runoob.com/cssref/sel-first-of-type.html" target="_blank">:first-of-type</a></td>\r\n<td>p:first-of-type</td>\r\n<td>选择每个p元素是其父级的第一个p元素</td>\r\n<td>3</td>\r\n</tr>\r\n<tr>\r\n<td><a href="http://www.runoob.com/cssref/sel-last-of-type.html" target="_blank">:last-of-type</a></td>\r\n<td>p:last-of-type</td>\r\n<td>选择每个p元素是其父级的最后一个p元素</td>\r\n<td>3</td>\r\n</tr>\r\n<tr>\r\n<td><a href="http://www.runoob.com/cssref/sel-only-of-type.html" target="_blank">:only-of-type</a></td>\r\n<td>p:only-of-type</td>\r\n<td>选择每个p元素是其父级的唯一p元素</td>\r\n<td>3</td>\r\n</tr>\r\n<tr>\r\n<td><a href="http://www.runoob.com/cssref/sel-only-child.html" target="_blank">:only-child</a></td>\r\n<td>p:only-child</td>\r\n<td>选择每个p元素是其父级的唯一子元素</td>\r\n<td>3</td>\r\n</tr>\r\n<tr>\r\n<td><a href="http://www.runoob.com/cssref/sel-nth-child.html" target="_blank">:nth-child(<i>n</i>)</a></td>\r\n<td>p:nth-child(2)</td>\r\n<td>选择每个p元素是其父级的第二个子元素</td>\r\n<td>3</td>\r\n</tr>\r\n<tr>\r\n<td><a href="http://www.runoob.com/cssref/sel-nth-last-child.html" target="_blank">:nth-last-child(<i>n</i>)</a></td>\r\n<td>p:nth-last-child(2)</td>\r\n<td>选择每个p元素的是其父级的第二个子元素，从最后一个子项计数</td>\r\n<td>3</td>\r\n</tr>\r\n<tr>\r\n<td><a href="http://www.runoob.com/cssref/sel-nth-of-type.html" target="_blank">:nth-of-type(<i>n</i>)</a></td>\r\n<td>p:nth-of-type(2)</td>\r\n<td>选择每个p元素是其父级的第二个p元素</td>\r\n<td>3</td>\r\n</tr>\r\n<tr>\r\n<td><a href="http://www.runoob.com/cssref/sel-nth-last-of-type.html" target="_blank">:nth-last-of-type(<i>n</i>)</a></td>\r\n<td>p:nth-last-of-type(2)</td>\r\n<td>选择每个p元素的是其父级的第二个p元素，从最后一个子项计数</td>\r\n<td>3</td>\r\n</tr>\r\n<tr>\r\n<td><a href="http://www.runoob.com/cssref/sel-last-child.html" target="_blank">:last-child</a></td>\r\n<td>p:last-child</td>\r\n<td>选择每个p元素是其父级的最后一个子级。</td>\r\n<td>3</td>\r\n</tr>\r\n<tr>\r\n<td><a href="http://www.runoob.com/cssref/sel-root.html" target="_blank">:root</a></td>\r\n<td>:root</td>\r\n<td>选择文档的根元素</td>\r\n<td>3</td>\r\n</tr>\r\n<tr>\r\n<td><a href="http://www.runoob.com/cssref/sel-empty.html" target="_blank">:empty</a></td>\r\n<td>p:empty</td>\r\n<td>选择每个没有任何子级的p元素（包括文本节点）</td>\r\n<td>3</td>\r\n</tr>\r\n<tr>\r\n<td><a href="http://www.runoob.com/cssref/sel-target.html" target="_blank">:target</a></td>\r\n<td>#news:target</td>\r\n<td>选择当前活动的#news元素（包含该锚名称的点击的URL）</td>\r\n<td>3</td>\r\n</tr>\r\n<tr>\r\n<td><a href="http://www.runoob.com/cssref/sel-enabled.html" target="_blank">:enabled</a></td>\r\n<td>input:enabled</td>\r\n<td>选择每一个已启用的输入元素</td>\r\n<td>3</td>\r\n</tr>\r\n<tr>\r\n<td><a href="http://www.runoob.com/cssref/sel-disabled.html" target="_blank">:disabled</a></td>\r\n<td>input:disabled</td>\r\n<td>选择每一个禁用的输入元素</td>\r\n<td>3</td>\r\n</tr>\r\n<tr>\r\n<td><a href="http://www.runoob.com/cssref/sel-checked.html" target="_blank">:checked</a></td>\r\n<td>input:checked</td>\r\n<td>选择每个选中的输入元素</td>\r\n<td>3</td>\r\n</tr>\r\n<tr>\r\n<td><a href="http://www.runoob.com/cssref/sel-not.html" target="_blank">:not(<i>selector</i>)</a></td>\r\n<td>:not(p)</td>\r\n<td>选择每个并非p元素的元素</td>\r\n<td>3</td>\r\n</tr>\r\n<tr>\r\n<td><a href="http://www.runoob.com/cssref/sel-selection.html" target="_blank">::selection</a></td>\r\n<td>::selection</td>\r\n<td>匹配元素中被用户选中或处于高亮状态的部分</td>\r\n<td>3</td>\r\n</tr>\r\n<tr>\r\n<td><a href="http://www.runoob.com/cssref/sel-out-of-range.html" target="_blank">:out-of-range</a></td>\r\n<td>:out-of-range</td>\r\n<td>匹配值在指定区间之外的input元素</td>\r\n<td>3</td>\r\n</tr>\r\n<tr>\r\n<td><a href="http://www.runoob.com/cssref/sel-in-range.html" target="_blank">:in-range</a></td>\r\n<td>:in-range</td>\r\n<td>匹配值在指定区间之内的input元素</td>\r\n<td>3</td>\r\n</tr>\r\n<tr>\r\n<td><a href="http://www.runoob.com/cssref/sel-read-write.html" target="_blank">:read-write</a></td>\r\n<td>:read-write</td>\r\n<td>用于匹配可读及可写的元素</td>\r\n<td>3</td>\r\n</tr>\r\n<tr>\r\n<td><a href="http://www.runoob.com/cssref/sel-read-only.html" target="_blank">:read-only</a></td>\r\n<td>:read-only</td>\r\n<td>用于匹配设置 “readonly”（只读） 属性的元素</td>\r\n<td>3</td>\r\n</tr>\r\n<tr>\r\n<td><a href="http://www.runoob.com/cssref/sel-optional.html" target="_blank">:optional</a></td>\r\n<td>:optional</td>\r\n<td>用于匹配可选的输入元素</td>\r\n<td>3</td>\r\n</tr>\r\n<tr>\r\n<td><a href="http://www.runoob.com/cssref/sel-required.html" target="_blank">:required</a></td>\r\n<td>:required</td>\r\n<td>用于匹配设置了 “required” 属性的元素</td>\r\n<td>3</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n</div>', 'CSS3选择器', 'css3、前端笔记、css3选择器', '选择器 示例 示例说明 CSS .class .intro 选择所有class="intro"的元素 1 #id #firstname 选择所有id="firstname"的元素 1 * * 选择所有'),
(18, 1, 0, 0, 0, '		<h2 class="title_h2">animation复合属性</h2>\r\n		<p class="title_p">\r\n			<i class="iconfont title_i">&#xe666;</i> animation-name: 规定动画名称；<br/>\r\n			<i class="iconfont title_i">&#xe666;</i> animation-duration: 动画执行完成所需时间，单位s；<br/>\r\n			<i class="iconfont title_i">&#xe666;</i> animation-timing-function: 动画运动曲线，默认为ease；<br/>\r\n			<i class="iconfont title_i">&#xe666;</i> animation-delay: 规定是否延迟执行，默认为0；<br/>\r\n			<i class="iconfont title_i">&#xe666;</i> animation-iteration-count: 动画执行次数；<br/>\r\n			<i class="iconfont title_i">&#xe666;</i> animation-direction: 动画是否逆向播放，默认normal；<br/>\r\n			<i class="iconfont title_i">&#xe666;</i> animation-play-state: 动画执行状态；paused(暂停) | running(运行)<br/>\r\n			<i class="iconfont title_i">&#xe666;</i> animation-fill-mode: 动画执行完成的状态；<br/>\r\n			<i class="iconfont title_i">&#xe666;</i> @keyframes name{} 执行动画；<br/></p>\r\n				<div class="code-toolbar">\r\n<pre class="line-numbers language-css">\r\n<code class="language-css">\r\ndiv{\r\n    animation-name: name; /*规定动画名称*/\r\n    animation-duration: 1s; /*动画执行完成所需时间，单位s*/\r\n    animation-timing-function: ease; /*动画运动曲线，默认为ease*/\r\n        animation-timing-function: linear; /*（匀速）*/\r\n        animation-timing-function: ease; /*（慢速开始，然后加快，慢速结束）*/\r\n        animation-timing-function: ease-in; /*（慢速开始）*/\r\n        animation-timing-function: ease-out; /*（慢速结束）*/\r\n        animation-timing-function: ease-in-out; /*（慢速开始，慢速结束）*/\r\n        animation-timing-function: cubic-bezier(.17,.67,.91,.29); /*（cubic-bezier函数中自定义值）*/\r\n    animation-delay: 0s; /*规定是否延迟执行，默认为0*/\r\n    animation-iteration-count: 1; /*动画执行次数*/\r\n        animation-iteration-count: 1; /*（一次）*/\r\n        animation-iteration-count: infinite; /*（无限循环）*/\r\n    animation-direction: normal; /*动画是否逆向播放，默认normal*/\r\n        animation-direction: normal; /*（默认值不反向）*/\r\n        animation-direction: alternate; /*（反向）*/\r\n    animation-play-state: running; /*动画执行状态paused(暂停) | running(运行)*/\r\n    animation-fill-mode: none; /*动画执行完成的状态*/\r\n        animation-fill-mode: none; /*（无动作）*/\r\n        animation-fill-mode: forwards; /*（停留在执行完成的最后一帧）*/\r\n        animation-fill-mode: backwards; /*（返回起始位置）*/\r\n        animation-fill-mode: both; /*（向前、向后填充模式都被应用）*/\r\n}\r\n</code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>CSS</span></div></div>\r\n				</div>\r\n		<p class="title_p"><span class="orange"><strong>可以用from to来设置动画</strong></span></p>\r\n			<div class="code-toolbar">\r\n<pre class="line-numbers language-css">\r\n<code class="language-css">\r\n@keyframes name{\r\n  from{\r\n    width: 100px;\r\n  }\r\n  to{\r\n    width: 150px;\r\n  }\r\n}\r\n</code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>CSS</span></div></div>\r\n				</div>\r\n		<p class="title_p"><span class="orange"><strong>也可以用百分比来设置动画</strong></span></p>\r\n					<div class="code-toolbar">\r\n<pre class="line-numbers language-css">\r\n<code class="language-css">\r\n@keyframes name{\r\n  10%{\r\n    width: 10px;\r\n  }\r\n  30%{\r\n    width: 40px;\r\n  }\r\n  60%{\r\n    width: 80px;\r\n  }\r\n  100%{\r\n    width: 50px;\r\n  }\r\n}\r\n</code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>CSS</span></div></div>\r\n				</div>\r\n				<h2 class="title_h2">各浏览器兼容情况</h2>\r\n				<p class="title_p"><img src="img/animation.png"/></p>\r\n				<div><a href="animation.html" target="_blank" class="sharebtn">DEMO展示</a></div>', 'css3、animation', 'css3、前端笔记、css3中的animation', 'animation复合属性 animation-name: 规定动画名称； animation-duration: 动画执行完成所需时间，单位s； animation-timing-function:'),
(19, 1, 0, 0, 0, '<p class="title_p">transition是css3新增属性，可以在不使用 Flash 动画或 JavaScript 的情况下，在元素从一种样式变换为另一种样式时为元素添加效果。</p>\r\n<p class="title_p"><i class="iconfont title_i">&#xe666;</i> transition属性主要包括4个值：<br/>\r\n	transition-property CSS 属性的名称；<br/>\r\n	transition-duration 定义过渡时间，默认是 0；<br/>\r\n	transition-timing-function 规定过渡效果的时间曲线，有linear(匀速)，ease（慢速开始，加快，慢速结束），ease-in（慢速开始），ease-out（慢速结束），ease-in-out（慢速开始，慢速结束），cubic-bezier（cubic-bezier函数中自定义值），默认是 "ease"；<br/>\r\n	transition-delay 规定过渡效果何时开始，默认是 0<br/>\r\n	<i class="iconfont title_i">&#xe666;</i> cubic-bezier可视化网站: <a href="http://cubic-bezier.com" target="_blank" class="title_a">http://cubic-bezier.com</a></p><br/>\r\n	<div><a href="transition.html" class="sharebtn" target="_blank">DEMO展示</a></div>', 'css、transition', 'css3、前端笔记、css3 transition', 'CSS3 transition 允许 CSS 元素的属性值在一定的时间区间内平滑地过渡。我们可以在不使用 Flash 动画或 JavaScript 的情况下，在元素从一种样式变换为另一种样式时为元素添'),
(20, 1, 1, 0, 0, '<h2 class="title_h2">介绍</h2>\r\n<p class="title_p">CSS Grid 布局是 CSS 中最强大的布局系统。与 flexbox 的一维布局系统不同，CSS Grid 布局是一个二维布局系统，也就意味着它可以同时处理列和行。它的工作原理是将HTML元素转换为具有行和列的网格容器，以便将子元素放置在网格中所需的位置。总而言之，它更<svg class="icon" aria-hidden="true"><use xlink:href="#icon-58"></use>\r\n</svg><svg class="icon" aria-hidden="true"><use xlink:href="#icon-pijiu"></use></svg>一点，兼容性方面呢，还算阔以。<br/><br/><img src="img/grid_support.png"/></p>\r\n<h2 class="title_h2">行和列</h2>\r\n<p class="title_p">容器（被设置成<code>display:grid</code>）里面的水平区域称为"行"（row），垂直区域称为"列"（column），行和列的交叉区域，称为"单元格"（cell）。n行和m列会产生n x m个单元格，n行有n + 1根水平网格线，m列有m + 1根垂直网格线。</p>\r\n<h2 class="title_h2">容器属性</h2>\r\n<p class="title_p">和flex布局的写法相似，<code>display:grid</code>指定一个容器采用网格布局，容器内部元素称为项目（item）</p>\r\n<div class="code-toolbar">\r\n<pre class="language-html line-numbers">\r\n<code class="language-html">\r\n&lt;div class="grid-container"&gt;\r\n  &lt;div class="grid-item"&gt;1&lt;/div&gt;\r\n  &lt;div class="grid-item"&gt;2&lt;/div&gt;\r\n  &lt;div class="grid-item"&gt;3&lt;/div&gt;\r\n  &lt;div class="grid-item"&gt;4&lt;/div&gt;\r\n  &lt;div class="grid-item"&gt;5&lt;/div&gt;\r\n  &lt;div class="grid-item"&gt;6&lt;/div&gt;\r\n&lt;/div&gt;\r\n</code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>HTML</span></div></div>\r\n		</div>\r\n		<div class="code-toolbar">\r\n<pre class="language-css line-numbers">\r\n<code class="language-css">\r\n.grid-container{\r\n	display:grid;  /*指定一个容器采用网格布局*/\r\n	display:inline-grid;   /*指定容器为行内元素，采用网格布局*/\r\n}\r\n</code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>CSS</span></div></div>\r\n		</div>\r\n	<div><img src="img/grid1.png"/></div>\r\n	<h2 class="title_h2">设置行和列</h2>\r\n	<p class="title_p"><i class="iconfont title_i">&#xe666;</i><code>grid-template-columns</code>属性定义每一列的列宽，<code>grid-template-rows</code>属性定义每一行的行高，属性的参数数量就是划分为具体的多少列（行）。</p>\r\n			<div class="code-toolbar">\r\n<pre class="language-css line-numbers">\r\n<code class="language-css">\r\n.grid-container{\r\n	display:grid;  \r\n	grid-template-columns: 60px 180px 60px;\r\n  	grid-template-rows: 60px 100px;\r\n}\r\n</code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>CSS</span></div></div>\r\n		</div>\r\n		<div><img src="img/grid2.png"/></div>\r\n		<h2 class="title_h2">常用的函数和关键字</h2>\r\n		<p class="title_p"><code>repeat()</code> 简化重复的值，接受两个参数，其一是重复的次数，其二是重复的值<br/>\r\n			<code>fr</code> 比例单位，根据剩余的宽度分配所占比例<br/>\r\n			<code>auto-fill</code> 根据项目大小，自动填充容器<br/>\r\n			<code>auto</code> 浏览器自己决定长度<br/>\r\n			<code>minmax()</code> 在长度范围内产生一个长度，两个参数，最小值和最大值<br/>\r\n			<code>%</code> 根据容器的宽和高去计算百分比\r\n		</p>\r\n		<p class="title_p">下列DEMO中设置2行3列，第一列为30px，第二列和第三列总宽度=父级宽度-30px，剩下的宽度它俩呈2:1的关系，第一行为60px，剩下高度浏览器自行分配给第二行，一般全部分给剩下的元素</p>\r\n					<div class="code-toolbar">\r\n<pre class="language-css line-numbers">\r\n<code class="language-css">\r\n.grid-container{\r\n			display:grid;\r\n			width: 300px;\r\n			height: 350px;\r\n			grid-template-columns: 30px 2fr 1fr;\r\n  			grid-template-rows: 60px auto;\r\n  			margin: 150px auto;\r\n		}\r\n</code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>CSS</span></div></div>\r\n		</div>\r\n		<div><img src="img/grid3.png"/></div>\r\n		<h2 class="title_h2">设置间隙</h2>\r\n		<p class="title_p"><code>grid-row-gap</code>属性设置行与行的间隔（行间距），<code>grid-column-gap</code>属性设置列与列的间隔（列间距）。<code>grid-gap</code>为二者的缩写形式</p>\r\n						<div class="code-toolbar">\r\n<pre class="language-css line-numbers">\r\n<code class="language-css">\r\n	.grid-container{\r\n			display:grid;\r\n			width: 300px;\r\n			height: 350px;\r\n			grid-template-columns: 30px 2fr 1fr;\r\n  			grid-template-rows: 60px auto;\r\n  			grid-column-gap:5px;\r\n  			grid-row-gap:5px;\r\n  			/* grid-gap:5px 5px; */       /*写法:grid-gap:&lt;grid-row-gap&gt; &lt;grid-column-gap&gt;*/\r\n  			margin: 150px auto;\r\n		}\r\n</code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>CSS</span></div></div>\r\n		</div>\r\n		<div><img src="img/grid.png"/></div>\r\n		<h2 class="title_h2">定义区域与排列顺序</h2>\r\n		<p class="title_p"><code>grid-template-areas</code>用来指定"区域"，一个区域由单个或多个单元格组成;<code>grid-auto-flow</code>此属性可以设置项目的排列顺序是"先行后列"还是"先列后行"</p>\r\n		<p class="title_p"><span class="orange"><strong>定义区域，将9个单元格分到9个区域中，用不着的区域可以用''.''代替</strong></span></p>\r\n		<div class="code-toolbar">\r\n<pre class="language-css line-numbers">\r\n<code class="language-css">\r\n	.grid-container{\r\n  			grid-template-areas: ''a b c''\r\n                      			  ''d e f''\r\n                       			  ''g h i'';\r\n		}\r\n</code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>CSS</span></div></div>\r\n		</div>\r\n		<p class="title_p"><span class="orange"><strong><code>grid-auto-flow</code>设置项目"先列后行"排列，想让其他项目元素紧密排布，可是设置<code>column dense</code></strong></span></p>\r\n		<div class="code-toolbar">\r\n<pre class="language-css line-numbers">\r\n<code class="language-css">\r\n	.grid-container{\r\n			grid-auto-flow: column;\r\n			/* grid-auto-flow: column dense; */\r\n		}\r\n</code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>CSS</span></div></div>\r\n		</div>\r\n		<div><img src="img/grid4.png"/></div>\r\n		<h2 class="title_h2">设置单元格内容位置</h2>\r\n		<p class="title_p"><code>justify-items</code>设置单元格内容的水平位置，<code>align-items</code>设置单元格内容的垂直位置，<code>place-items</code>为二者的缩写形式</p>\r\n				<div class="code-toolbar">\r\n<pre class="language-css line-numbers">\r\n<code class="language-css">\r\n	.grid-container{\r\n			 justify-items: start | end | center | stretch;\r\n  			 align-items: start | end | center | stretch;\r\n  			 place-items: &lt;align-items&gt; &lt;justify-items&gt;\r\n		}\r\n</code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>CSS</span></div></div>\r\n		</div>\r\n		<div><img src="img/grid5.png"/></div>\r\n		<h2 class="title_h2">设置整个内容区域在容器的位置</h2>\r\n		<p class="title_p"><code>justify-content</code>设置整个内容区域在容器的水平位置，<code>align-content</code>设置整个内容区域在容器的垂直位置，<code>place-content</code>为二者缩写形式</p>\r\n						<div class="code-toolbar">\r\n<pre class="language-css line-numbers">\r\n<code class="language-css">\r\n	.grid-container{\r\n			 justify-content: start | end | center | stretch | space-around | space-between | space-evenly;\r\n  			 align-content: start | end | center | stretch | space-around | space-between | space-evenly;  \r\n  			/* place-content: &lt;align-content&gt; &lt;justify-content&gt; */\r\n  			 place-content:space-around space-around;\r\n		}\r\n</code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>CSS</span></div></div>\r\n		</div>\r\n		<div><img src="img/grid6.png" alt="" /></div>\r\n		<h2 class="title_h2">指定项目元素在网格外部的位置</h2>\r\n		<p class="title_p"><code>grid-auto-columns</code>指定创建多余网格的列宽，<code>grid-auto-rows</code>指定创建多余网格的行高</p>\r\n		<div><img src="img/grid7.png"/></div>\r\n		<h2 class="title_h2">项目属性</h2>\r\n		<p class="title_p"><i class="iconfont title_i">&#xe666;</i> <code>grid-column-start</code>属性<br/>\r\n			<i class="iconfont title_i">&#xe666;</i> <code>grid-column-end</code>属性<br/>\r\n			<i class="iconfont title_i">&#xe666;</i> <code>grid-row-start</code>属性<br/>\r\n			<i class="iconfont title_i">&#xe666;</i> <code>grid-row-end</code>属性<br/>\r\n			项目的位置可以指定具体定位在哪根网格线上\r\n		</p>\r\n		<div class="code-toolbar">\r\n<pre class="language-css line-numbers">\r\n<code class="language-css">\r\n	.item{\r\n			 grid-column-start: 1;  /*项目的左边框定位在第1根垂直网格线*/\r\n  			 grid-column-end: 3;	\r\n  			 grid-row-start: 2;		/*项目的上边框定位在第2根水平网格线*/\r\n  			 grid-row-end: 4;		\r\n  			 grid-row-start:span 2;  /*项目的左边框距离右边框跨越2个网格*/\r\n		}\r\n</code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>CSS</span></div></div>\r\n		</div>\r\n		<p class="title_p">还有一些项目属性<code>grid-area</code>，<code>justify-self</code>，<code>align-self</code>，<code>place-self</code>都是单独设置项目元素的区域及位置，用法和容器的属性一样，笔者就不一一介绍了，拜拜~~</p>', 'css3、grid布局', 'css3、前端笔记、css3中的grid', '凭借 CSS Grid可轻松构建复杂的Web设计。它的工作原理是将HTML元素转换为具有行和列的网格容器，以便将子元素放置在网格中所需的位置。 通过将元素的父级设置display: grid;转化为网'),
(21, 1, 0, 1, 0, '<h2 class="title_h2">介绍</h2>\r\n<p class="title_p">HTML5标准中新增了元素的拖放（drag and drop）接口，通过js与<code>draggable</code>属性的配合，可以对任一元素进行拖放，增强用户体验。</p>\r\n	<h2 class="title_h2">源对象</h2>\r\n	<p class="title_p">何为源对象？简单来说，源对象就是我们要拖动的一个对象元素，比如一张图片，一段文字之类的。</p>\r\n	<p class="title_p"><span><strong>源对象常见的几个API函数</strong></span><br/>\r\n		<i class="iconfont title_i">&#xe666;</i> <code>ondragstart</code>源对象开始拖动时触发<br/>\r\n		<i class="iconfont title_i">&#xe666;</i> <code>ondrag</code>源对象拖动过程中触发<br/>\r\n		<i class="iconfont title_i">&#xe666;</i> <code>ondragend</code>源对象拖动结束后触发<br/>\r\n		<strong>设置源对象可拖放</strong>\r\n	</p>\r\n				<div class="code-toolbar">\r\n<pre class="language-html line-numbers">\r\n<code class="language-html">\r\n&lt;img id="img1" src="img/logo.jpg" draggable="true" width="300" height="80"/&gt;\r\n</code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>HTML</span></div></div>\r\n				</div>\r\n	<h2 class="title_h2">目标对象</h2>\r\n	<p class="title_p">目标对象便是我们要将源对象拖动放置的一块区域。</p>\r\n	<p class="title_p"><span><strong>目标对象常见的几个API函数</strong></span><br/>\r\n		<i class="iconfont title_i">&#xe666;</i> <code>ondrop</code>源对象拖动在目标对象上方释放时触发<br/>\r\n		<i class="iconfont title_i">&#xe666;</i> <code>ondragenter</code>目标对象被源对象拖动着进入触发<br/>\r\n		<i class="iconfont title_i">&#xe666;</i> <code>ondragover</code>目标对象被源对象拖动着悬停在上方触发<br/>\r\n	</p>\r\n	<h2 class="title_h2">源对象与目标对象传递数据</h2>\r\n	<p class="title_p">HTML5提供了一个新的属性<code>e.dataTransfer</code>来传递数据，<code>e.dataTransfer.setData(key,value);</code>源对象设置保存数据，<code>e.dataTransfer.getData(key);</code>目标对象读取数据。</p>\r\n	<!--<button class="btn btn-primary" type="button" data-toggle="collapse" data-target="#collapseExample" aria-expanded="false" aria-controls="collapseExample">\r\n  		<h2 class="title_h2">示例（拖拽下列图片）</h2>\r\n	</button>-->\r\n	<p class="title_p pp" data-toggle="collapse" data-target="#collapseExample" aria-expanded="false" aria-controls="collapseExample"><i class="iconfont i_block i_transform ii">&#xe655;</i> 示例（拖拽下列图片）</p>\r\n	<div class="collapse" id="collapseExample">\r\n  <div class="well">\r\n	   	<div class="drop">\r\n			<div class="drop_one" id="div1" ondrop="drop(event)" ondragover="allowDrop(event)"><img src="img/css3_img.png" width="150" height="100" draggable="true" ondragstart="drag(event)" id="drag1"/></div>\r\n			<div class="drop_two" id="div2" ondrop="drop(event)" ondragover="allowDrop(event)"></div>\r\n		</div>\r\n  </div>\r\n</div>\r\n	<div class="code-toolbar">\r\n<pre class="language-html line-numbers">\r\n<code class="language-html">\r\n&lt;div class="drop"&gt;\r\n		&lt;div class="drop_one" id="div1" ondrop="drop(event)" ondragover="allowDrop(event)"&gt;&lt;img src="../image/css3.png" width="150" height="100" draggable="true" ondragstart="drag(event)" id="drag1"/&gt;&lt;/div&gt;\r\n		&lt;div class="drop_two" id="div2" ondrop="drop(event)" ondragover="allowDrop(event)"&gt;&lt;/div&gt;\r\n	&lt;/div&gt;\r\n</code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>HTML</span></div></div>\r\n				</div>\r\n				<div class="code-toolbar">\r\n<pre class="language-javascript line-numbers">\r\n<code class="language-javascript">\r\nfunction allowDrop(ev)\r\n{\r\n	ev.preventDefault();\r\n}\r\n\r\nfunction drag(ev)\r\n{\r\n	ev.dataTransfer.setData("Text",ev.target.id);\r\n}\r\n\r\nfunction drop(ev)\r\n{\r\n	ev.preventDefault();\r\n	var data=ev.dataTransfer.getData("Text");\r\n	ev.target.appendChild(document.getElementById(data));\r\n	ev.dataTransfer.clearData("Text");\r\n}\r\n</code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>JavaScript</span></div></div>\r\n				</div>\r\n				<p class="title_p">HTML页面默认情况下，拖拽元素一般以链接的形式打开新窗口显示，为了阻止浏览器默认行为，可以用<code>event</code>对象下的<code>preventDefault()</code>方法，源对象在开始拖动的时候，将该对象的信息存到dataTransfer对象（类似于一个剪贴板），之后拖放结束，目标对象再读取信息，将读取到的信息赋给目标元素</p>\r\n	<h2 class="title_h2">利用拖拽实现上传图片</h2>\r\n	<div class="code-toolbar">\r\n<pre class="language-html line-numbers">\r\n<code class="language-html">&lt;!DOCTYPE html&gt;\r\n&lt;html lang="zh"&gt;\r\n&lt;head&gt;\r\n	&lt;meta charset="UTF-8" /&gt;\r\n	&lt;meta name="viewport" content="width=device-width, initial-scale=1.0" /&gt;\r\n	&lt;meta http-equiv="X-UA-Compatible" content="ie=edge" /&gt;\r\n	&lt;title&gt;h5拖拽上传图片&lt;/title&gt;\r\n	&lt;style&gt;\r\n        * {\r\n        	margin: 0;\r\n            text-align: center;\r\n        }\r\n \r\n        #container {\r\n        	width: 80%;\r\n            min-height: 200px;\r\n            border: 1px solid #666;\r\n            margin: 1rem auto;\r\n            padding: 1rem;\r\n        }\r\n    &lt;/style&gt;\r\n&lt;/head&gt;  \r\n&lt;body&gt;\r\n    &lt;h2&gt;将本地图片拖拽上传至下方区域&lt;/h2&gt;\r\n    &lt;div id="container"&gt;&lt;/div&gt;\r\n    &lt;script&gt;\r\n    	var box = document.querySelector(''#container'');\r\n        //阻止浏览器的默认事件\r\n        function Myfunc(e){\r\n        	var e = e || event;\r\n        	e.preventDefault();\r\n        }\r\n		 document.addEventListener(''drop'',Myfunc);\r\n		 document.addEventListener(''dragover'',Myfunc);\r\n        \r\n 		 box.addEventListener(''dragover'',Myfunc);\r\n         box.ondrop = function (e) {\r\n            // 读取拖放进来的客户端图片内容\r\n//		 var list=e.dataTransfer.files;\r\n//		 for(var i=0;i&lt;list.length;i++){\r\n//			console.log(list[i]);\r\n//		 }\r\n \r\n            // 找到文件\r\n            var f = e.dataTransfer.files[0];\r\n            // 创建文件读取器\r\n            var reader = new FileReader();\r\n            // 读取文件中的内容\r\n            reader.readAsDataURL(f);\r\n            reader.onload = function () {\r\n                console.log("客户端读取数据成功！");\r\n                //格式为数据编码\r\n                console.log(reader.result);\r\n                var img = new Image();\r\n                img.src = reader.result;\r\n                box.appendChild(img);\r\n            }\r\n        }\r\n    &lt;/script&gt;\r\n&lt;/body&gt;\r\n&lt;/html&gt;\r\n</code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>HTML</span></div></div>\r\n				</div>\r\n				<div><a href="drag.html" target="_blank" class="sharebtn">DEMO展示</a></div>', 'h5、拖拽', 'html5、前端笔记、html5拖拽', 'HTML5标准中新增了元素的拖放（drag and drop）接口，通过js与draggable属性的配合，可以对任一元素进行拖放，增强用户体验。'),
(22, 0, 0, 0, 0, '		<p class="title_p">我们每次都会用到一些meta标签，对做seo优化也有帮助，接下来，在这里做一下整理。</p>\r\n<h2 class="title_h2">文档声明字符编码</h2>\r\n	<div class="code-toolbar">\r\n<pre class="line-numbers language-html">\r\n<code class="language-html">\r\n&lt;meta charset="utf-8"&gt;\r\n&lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8"&gt;</code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>HTML</span></div></div>	\r\n				</div>\r\n	<h2 class="title_h2">移动端Viewport</h2>\r\n	<p class="title_p"><span class="orange"><strong>content参数：</strong></span><br/>\r\n		<i class="iconfont title_i">&#xe666;</i> <code>width viewport</code>宽度(数值/device-width)<br/>\r\n		<i class="iconfont title_i">&#xe666;</i> <code>height viewport</code>高度(数值/device-height)<br/>\r\n		<i class="iconfont title_i">&#xe666;</i> <code>initial-scale</code>初始缩放比例<br/>\r\n		<i class="iconfont title_i">&#xe666;</i> <code>maximum-scale</code>最大缩放比例<br/>\r\n		<i class="iconfont title_i">&#xe666;</i> <code>minimum-scale</code>最小缩放比例<br/>\r\n		<i class="iconfont title_i">&#xe666;</i> <code>user-scalable</code>是否允许用户缩放(yes/no)<br/>\r\n	</p>\r\n		<div class="code-toolbar">\r\n<pre class="line-numbers language-html">\r\n<code class="language-html">\r\n&lt;meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0"&gt;</code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>HTML</span></div></div>	\r\n			</div>\r\n	<h2 class="title_h2">设置IE浏览器渲染页面的兼容模式</h2>\r\n	<p class="title_p"><span class="orange"><strong>content参数说明</strong></span><br/>\r\n		<i class="iconfont title_i">&#xe666;</i> <code>IE=edge</code>以IE可用最高版本渲染页面<br/>\r\n		<i class="iconfont title_i">&#xe666;</i> <code>chrome=1</code>Google Chrome Frame(谷歌内嵌浏览器框架GCF)，插件可以让用户的IE浏览器外不变，但用户在浏览网页时，实际上使用的是Chrome浏览器内核<br/>\r\n	</p>\r\n		<div class="code-toolbar">\r\n<pre class="line-numbers language-html">\r\n<code class="language-html">\r\n&lt;meta http-equiv="X-UA-Compatible" content="ie=edge, chrome=1"&gt;</code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>HTML</span></div></div>	\r\n				</div>\r\n	<h2 class="title_h2">SEO优化</h2>\r\n			<div class="code-toolbar">\r\n<pre class="line-numbers language-html">\r\n<code class="language-html">\r\n&lt;!-- 页面标题&lt;title&gt;标签(head 头部必须) --&gt;\r\n&lt;title&gt;肥小波博客&lt;/title&gt;\r\n&lt;!-- 页面关键词 keywords --&gt;\r\n&lt;meta name="keywords" content="肥小波，前端笔记，肥小波博客"&gt;\r\n&lt;!-- 页面描述内容 description --&gt;\r\n&lt;meta name="description" content="描述信息...."&gt;\r\n&lt;!-- 定义网页作者 author --&gt;\r\n&lt;meta name="author" content="肥小波"&gt;\r\n&lt;!-- 定义网页搜索引擎索引方式，robotterms 是一组使用英文逗号「,」分割的值，通常有如下几种取值：none，noindex，nofollow，all，index和follow。 --&gt;\r\n&lt;meta name="robots" content="index,follow"&gt;</code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>HTML</span></div></div>	\r\n				</div>\r\n	<h2 class="title_h2">忽略数字识别为电话，忽略email识别</h2>\r\n			<div class="code-toolbar">\r\n<pre class="line-numbers language-html">\r\n<code class="language-html">\r\n&lt;meta name="format-detection" content="telphone=no, email=no" /&gt;</code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>HTML</span></div></div>	\r\n				</div>\r\n	<h2 class="title_h2">QQ手机浏览器</h2>\r\n				<div class="code-toolbar">\r\n<pre class="line-numbers language-html">\r\n<code class="language-html">\r\n&lt;!-- 锁定屏幕在特定方向 --&gt;\r\n&lt;meta name="x5-orientation" content="landscape/portrait"&gt;\r\n&lt;!-- 全屏显示 --&gt;\r\n&lt;meta name="x5-fullscreen" content="true"&gt;\r\n&lt;!-- 页面将以应用模式显示 --&gt;\r\n&lt;meta name="x5-page-mode" content="app"&gt;</code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>HTML</span></div></div>	\r\n				</div>\r\n	<h2 class="title_h2">Google Chrome</h2>\r\n				<div class="code-toolbar">\r\n<pre class="line-numbers language-html">\r\n<code class="language-html">\r\n&lt;!-- 优先使用最新的chrome版本 --&gt;\r\n&lt;meta http-equiv="X-UA-Compatible" content="chrome=1" /&gt;\r\n&lt;!-- 禁止自动翻译 --&gt;\r\n&lt;meta name="google" value="notranslate"&gt;</code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>HTML</span></div></div>	\r\n				</div>', 'html、meta标签大全', 'html、前端笔记、html中的meta标签', 'meta标签用来描述一个HTML网页文档的属性，例如作者、日期和时间、网页描述、关键词、页面刷新等。搜索引擎通过机器人自动查找网页中的meta值来给网站分类，只有完善了Meta，一个HTML页面才能算'),
(23, 1, 2, 0, 0, '		<p class="title_p">离线应用程序缓存，这项功能是设计给会有离线场景的应用来使用，例如：需要离线使用的手机APP/H5，亦或是PC端的纯静态页面。</p>\r\n		<h2 class="title_h2">使用方法</h2>\r\n					<div class="code-toolbar">\r\n<pre class="line-numbers language-html">\r\n<code class="language-html">\r\n	&lt;!-- 在标签 &lt;html&gt; 中指定 manifest 配置文件。 --&gt;\r\n&lt;html manifest="manifest.appcache"&gt;</code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>HTML</span></div></div>\r\n				</div>\r\n		<h2 class="title_h2">配置</h2>\r\n		<p class="title_p">新建manifest.appcache文件，配置如下：</p>\r\n		<div class="code-toolbar">\r\n<pre class="line-numbers language-html">\r\n<code class="language-html">\r\nCACHE MANIFEST\r\n# 井号备注，这边可以放版本更新时间，修改备注算更新 manifest 文件\r\nCACHE:\r\n# 首次下载 CACHE 后列出来的文件后缓存到本地。\r\nbg.jpg\r\n/index.css\r\n \r\nNETWORK:\r\n# NETWORK 下的文件不可被缓存，必须要与服务器连接。\r\nindex.php\r\n \r\nFALLBACK:\r\n# 一行放两个路径，第一个是访问资源，第二个是替补；当无法访问前一个资源时，用后一个资源代替之。\r\n/cat/ /404.html</code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>HTML</span></div></div>\r\n				</div>\r\n	<h2 class="title_h2">工作原理</h2>\r\n	<p class="title_p">首次在载入页面时，浏览器会判断是否引入了 manifest，若检测到引入，则下载并按文件规则缓存资源。\r\n再次载入页面时，便会根据 manifest 中规定的缓存文件使用本地缓存而不是请求服务器资源。\r\n当 manifest 文件更新时，页面加载已经进行，但是缓存更新尚未完成，便会先使用旧 manifest 所缓存的文件，同时浏览器会将新的 manifest 文件里的缓存文件下载下来，若想看到最新的静态资源需要刷新下页面重新加载一次。</p>\r\n	<h2 class="title_h2">总结</h2>\r\n	<p class="title_p">manifest 适用于需要离线运行的应用,它会把当前页面缓存下来，所以若想更新当前页，只能先更新 manifest 文件。</p>', 'h5、离线缓存', 'html5、前端笔记、html5缓存技术', '网站打开速度慢，可能是由于某些文件过大，从服务器拿数据一时间加载不过来，比如一张大的图片或者音频视频，都会影响到网站的加载速度，这时，我们可以利用文件的压缩或是缓存技术来优化'),
(24, 0, 0, 0, 0, '<h2 class="title_h2">新浪官网 样式初始化</h2>\r\n<div class="code-toolbar">\r\n<pre class="line-numbers language-css">\r\n<code class="language-css">\r\nbody,ul,ol,li,p,h1,h2,h3,h4,h5,h6,form,fieldset,table,td,img,div{margin:0;padding:0;border:0;} \r\nbody{background:#fff;color:#333;font-size:12px; margin-top:5px;font-family:"SimSun","宋体","Arial Narrow";} \r\n\r\nul,ol{list-style-type:none;} \r\nselect,input,img,select{vertical-align:middle;} \r\n \r\na{text-decoration:none;} \r\na:link{color:#009;} \r\na:visited{color:#800080;} \r\na:hover,a:active,a:focus{color:#c00;text-decoration:underline;}</code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>CSS</span></div></div>\r\n				</div>\r\n	<h2 class="title_h2">腾讯QQ官网 样式初始化</h2>\r\n	<div class="code-toolbar">\r\n<pre class="line-numbers language-css">\r\n<code class="language-css">\r\nbody,ol,ul,h1,h2,h3,h4,h5,h6,p,th,td,dl,dd,form,fieldset,legend,input,textarea,select{margin:0;padding:0} \r\nbody{font:12px"宋体","Arial Narrow",HELVETICA;background:#fff;-webkit-text-size-adjust:100%;} \r\na{color:#2d374b;text-decoration:none} \r\na:hover{color:#cd0200;text-decoration:underline} \r\nem{font-style:normal} \r\nli{list-style:none} \r\nimg{border:0;vertical-align:middle} \r\ntable{border-collapse:collapse;border-spacing:0} \r\np{word-wrap:break-word}</code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>CSS</span></div></div>\r\n				</div>\r\n	<h2 class="title_h2">淘宝官网 样式初始化</h2>\r\n		<div class="code-toolbar">\r\n<pre class="line-numbers language-css">\r\n<code class="language-css">\r\nbody, h1, h2, h3, h4, h5, h6, hr, p, blockquote, dl, dt, dd, ul, ol, li, pre, form, fieldset, legend, button, input, textarea, th, td { margin:0; padding:0; } \r\nbody, button, input, select, textarea { font:12px/1.5tahoma, arial, \\5b8b\\4f53; } \r\nh1, h2, h3, h4, h5, h6{ font-size:100%; } \r\naddress, cite, dfn, em, var { font-style:normal; } \r\ncode, kbd, pre, samp { font-family:couriernew, courier, monospace; } \r\nsmall{ font-size:12px; } \r\nul, ol { list-style:none; } \r\na { text-decoration:none; } \r\na:hover { text-decoration:underline; } \r\nsup { vertical-align:text-top; } \r\nsub{ vertical-align:text-bottom; } \r\nlegend { color:#000; } \r\nfieldset, img { border:0; } \r\nbutton, input, select, textarea { font-size:100%; } \r\ntable { border-collapse:collapse; border-spacing:0; }</code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>CSS</span></div></div>\r\n				</div>\r\n	<h2 class="title_h2">网易官网 样式初始化</h2>\r\n	<div class="code-toolbar">\r\n<pre class="line-numbers language-css">\r\n<code class="language-css">\r\nhtml {overflow-y:scroll;} \r\nbody {margin:0; padding:29px00; font:12px"\\5B8B\\4F53",sans-serif;background:#ffffff;} \r\ndiv,dl,dt,dd,ul,ol,li,h1,h2,h3,h4,h5,h6,pre,form,fieldset,input,textarea,blockquote,p{padding:0; margin:0;} \r\ntable,td,tr,th{font-size:12px;} \r\nli{list-style-type:none;} \r\nimg{vertical-align:top;border:0;} \r\nol,ul {list-style:none;} \r\nh1,h2,h3,h4,h5,h6{font-size:12px; font-weight:normal;} \r\naddress,cite,code,em,th {font-weight:normal; font-style:normal;}</code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>CSS</span></div></div>\r\n				</div>', 'css初始化', 'css、前端笔记、css样式初始化', 'CSS初始化是指重设浏览器的样式。不同的浏览器默认的样式可能不尽相同，所以开发时的第一件事可能就是如何把它们统一。如果没对CSS初始化往往会出现浏览器之间的页面差异'),
(25, 0, 0, 0, 0, '<h2 class="title_h2">SASS安装命令</h2>\r\n<blockquote>\r\n<p class="title_p"><span class="orange"><strong>NPM安装</strong></span><br/>\r\n	npm install -g sass<br/>\r\n	<span class="orange"><strong>Mac安装</strong></span><br/>\r\n	sudo gem install sass<br/>\r\n</p>\r\n</blockquote>\r\n<h2 class="title_h2">SASS更新、查看版本、帮助信息</h2>\r\n<blockquote>\r\n<p class="title_p"><span class="orange"><strong>sass更新</strong></span><br/>\r\n	gem install sass<br/>\r\n	<span class="orange"><strong>sass版本</strong></span><br/>\r\n	sass -v<br/>\r\n	<span class="orange"><strong>sass帮助</strong></span><br/>\r\n	sass -h\r\n</p>\r\n</blockquote>\r\n<h2 class="title_h2">SASS-命令行编译</h2>\r\n<blockquote>\r\n<p class="title_p">\r\n//单文件转换命令<br/>\r\nsass index.scss index.css<br/>\r\n<br/>\r\n//单文件监听命令<br/>\r\nsass --watch index.scss:index.css<br/>\r\n<br/>\r\n//sass监听整个目录：<br/>\r\nsass --watch app/sass:public/stylesheets\r\n</p></blockquote>\r\n<h2 class="title_h2">四种编译排版风格 --style</h2>\r\n<blockquote>\r\n	<p class="title_p">\r\n		 <i class="iconfont title_i">&#xe666;</i> <code>nested</code>嵌套缩进的css代码，它是默认值。<br/>\r\n		 <i class="iconfont title_i">&#xe666;</i> <code>expanded</code>没有缩进的、扩展的css代码。<br/>\r\n		 <i class="iconfont title_i">&#xe666;</i> <code>compact</code>简洁格式的css代码。<br/>\r\n		 <i class="iconfont title_i">&#xe666;</i> <code>compressed</code>压缩后的css代码。<br/>\r\n	</p>\r\n</blockquote>\r\n<strong>nested</strong><br/>\r\n<div><img src="img/nested.png"/></div>\r\n<strong>expanded</strong><br/>\r\n<div><img src="img/expanded.png"/></div>\r\n<strong>compact</strong><br/>\r\n<div><img src="img/compact.png"/></div>\r\n<strong>compressed</strong><br/>\r\n<div><img src="img/compressed.png"/></div>\r\n<h2 class="title_h2">SASS编译命令完整版</h2>\r\n<blockquote><p class="title_p">\r\n	sass --watch index.scss:index.css --style expanded --sourcemap\r\n</p></blockquote>', 'sass安装、配置', 'sass、前端笔记、sass安装配置基础', 'Sass (Syntactically Awesome Stylesheets) 是一个最初由 Hampton Catlin 设计并由 Natalie Weizenbaum 开发的层叠样式表语言。Sa'),
(26, 1, 0, 0, 0, '<p class="title_p">SASS是<a href="https://www.sass.hk/" class="title_a" target="_blank">CSS的预处理器（css preprocessor）</a>，CSS的一种开发工具，支持加减乘除运算、变量、嵌套、继承（继承上一个选择器）、mixin（代码重用）、颜色函数、插入文件、条件、循环语句、自定义函数。\r\nsass有两种写法，一种是以.sass后缀的文件语法是没有大括号的，和stylus风格类似；一种是.scss为后缀。</p>\r\n<h2 class="title_h2">变量</h2>\r\n<p class="title_p"><strong>scss所有变量以$开头</strong></p>\r\n<div class="code-toolbar">\r\n<pre class="line-numbers language-scss">\r\n<code class="language-scss">\r\n$lightblue : #add8e6;\r\n$right : right;\r\ndiv{\r\n	background : $lightblue;\r\n}\r\n/*编译结果*/\r\ndiv{\r\n	background : #add8e6;\r\n}\r\n/*如果变量需要镶嵌在字符串之中，就必须需要写在#{}之中*/\r\ndiv{\r\n	border-#{$right}-radius: 5px;\r\n}</code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>SCSS</span></div></div>\r\n				</div>\r\n	<h2 class="title_h2">计算功能</h2>\r\n	<p class="title_p"><strong>SASS允许在代码中使用算式</strong></p>\r\n	<div class="code-toolbar">\r\n<pre class="line-numbers language-scss">\r\n<code class="language-scss">\r\n$num : 20px;\r\ndiv{\r\n	width: (800px/2);\r\n	height: 200px + 100px;\r\n	margin: $num * 10%;\r\n}\r\n/*编译结果*/\r\ndiv{\r\n	width: 400px;\r\n	height: 300px;\r\n	margin: 2px;\r\n}</code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>SCSS</span></div></div>\r\n				</div>\r\n	<h2 class="title_h2">嵌套</h2>\r\n	<p class="title_p"><strong>嵌套写法可以不用写很长的选择层级，可以在选择器里嵌套着写</strong></p>\r\n	<div class="code-toolbar">\r\n<pre class="line-numbers language-scss">\r\n<code class="language-scss">\r\n.box{\r\n  width: 100px;\r\n  height: 100px;\r\n  border-radius: 5px;\r\n  a{\r\n    display: block;\r\n      img{\r\n         max-width: 100%;\r\n         max-height: 100%;\r\n       }\r\n  }\r\n}\r\n/*编译结果*/\r\n.box {\r\n  width: 100px;\r\n  height: 100px;\r\n  border-radius: 5px;\r\n}\r\n.box a {\r\n  display: block;\r\n}\r\n.box a img {\r\n   max-width: 100%;\r\n   max-height: 100%;\r\n}</code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>SCSS</span></div></div>\r\n				</div>\r\n	<p class="title_p"><strong>属性也可以嵌套，写法如下：</strong></p>\r\n	<div class="code-toolbar">\r\n<pre class="line-numbers language-scss">\r\n<code class="language-scss">\r\n.box{\r\n    border:{\r\n    	width: 2px;\r\n        color: #666;\r\n        style: dotted;\r\n        bottom:{\r\n            color: transparent;\r\n        }\r\n    }\r\n}\r\n/*编译结果*/\r\n.box {\r\n  border-width: 2px;\r\n  border-color: #666;\r\n  border-style: dotted;\r\n  border-bottom-color: transparent;\r\n}</code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>SCSS</span></div></div>\r\n				</div>\r\n	<p class="title_p"><strong>在嵌套的代码块内，可以使用&引用父元素</strong></p>\r\n	<div class="code-toolbar">\r\n<pre class="line-numbers language-scss">\r\n<code class="language-scss">\r\n$borderStyle : 1px solid #666;\r\n.box{\r\n    &:hover>img{\r\n    	border: $borderStyle;\r\n    }\r\n}\r\n/*编译结果*/\r\n.box:hover>img{\r\n	border: 1px solid #666; \r\n}</code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>SCSS</span></div></div>\r\n				</div>\r\n	<h2 class="title_h2">注释</h2>\r\n	<div class="code-toolbar">\r\n<pre class="line-numbers language-scss">\r\n<code class="language-scss">\r\n// comment，编译后被省略。\r\n		/* comment */ ，会保留到编译后的文件。\r\n		/*! */表重要注释，会保留到编译后的文件。</code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>SCSS</span></div></div>\r\n			</div>\r\n	<h2 class="title_h2">代码重用之继承</h2>\r\n	<p class="title_p"><strong>继承另一个选择器的代码，可以使用@extend命令</strong></p>\r\n	<div class="code-toolbar">\r\n<pre class="line-numbers language-scss">\r\n<code class="language-scss">\r\n.class{\r\n    border: 1px solid #666;\r\n}\r\n.class1{\r\n    @extend.class;\r\n    font-size: 16px;\r\n}\r\n/*编译结果*/\r\n.class, .class1 {\r\n    border: 1px solid #666;\r\n}\r\n\r\n.class1 {\r\n    font-size: 16px;\r\n}</code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>SCSS</span></div></div>\r\n			</div>\r\n		<h2 class="title_h2">代码重用之Mixin</h2>\r\n		<div class="code-toolbar">\r\n<pre class="line-numbers language-scss">\r\n<code class="language-scss">\r\n@mixin important-text {\r\n  color: red;\r\n  font-size: 25px;\r\n  font-weight: bold;\r\n  border: 1px solid blue;\r\n}\r\n.class{\r\n	@include important-text;\r\n}\r\n/*编译结果*/\r\n.class{\r\n  color: red;\r\n  font-size: 25px;\r\n  font-weight: bold;\r\n  border: 1px solid blue;\r\n}</code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>SCSS</span></div></div>\r\n			</div>\r\n	<p class="title_p"><strong>mixin传参</strong></p>\r\n	<div class="code-toolbar">\r\n<pre class="line-numbers language-scss">\r\n<code class="language-scss">\r\n@mixin randomAttr( $attr , $value : 1s ){\r\n    -webkit-#{$attr}: $value;\r\n       -moz-#{$attr}: $value;\r\n        -ms-#{$attr}: $value;\r\n         -o-#{$attr}: $value;\r\n            #{$attr}: $value;\r\n}\r\ndiv{\r\n    @include randomAttr(animation);\r\n}\r\n/*编译结果*/\r\ndiv {\r\n  -webkit-animation: 1s;\r\n  -moz-animation: 1s;\r\n  -ms-animation: 1s;\r\n  -o-animation: 1s;\r\n  animation: 1s;\r\n}</code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>SCSS</span></div></div>\r\n			</div>\r\n	<h2 class="title_h2">SASS内置颜色函数</h2>\r\n	<div class="code-toolbar">\r\n<pre class="line-numbers language-scss">\r\n<code class="language-scss">\r\n   lighten(#cc3, 10%)  /* #d6d65c */\r\n　　darken(#cc3, 10%) /* #a3a329 */\r\n　　grayscale(#cc3) 	/* #808080 */\r\n　　complement(#cc3) 	/* #33c */</code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>SCSS</span></div></div>\r\n			</div>\r\n	<h2 class="title_h2">自定义函数</h2>\r\n	<p class="title_p"><strong>SASS允许自定义函数</strong></p>\r\n	<div class="code-toolbar">\r\n<pre class="line-numbers language-scss">\r\n<code class="language-scss">\r\n@function px2rem($px) {\r\n	 $rem: 37.5px;\r\n　　　　@return ($px / $rem) + rem;\r\n　　}\r\n\r\n　　#sidebar {\r\n　　　　width: px2rem(75px);\r\n　　}\r\n   /*编译结果*/\r\n   #sidebar {\r\n	　　　　width: 2rem;\r\n	　　}</code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>SCSS</span></div></div>\r\n			</div>\r\n	<h2 class="title_h2">插入文件</h2>\r\n	<p class="title_p"><strong>@import命令，用来插入外部文件</strong></p>\r\n	<div class="code-toolbar">\r\n<pre class="line-numbers language-scss">\r\n<code class="language-scss">\r\n@import "css/index.scss";</code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>SCSS</span></div></div>\r\n			</div>\r\n	<h2 class="title_h2">条件语句</h2>\r\n	<div class="code-toolbar">\r\n<pre class="line-numbers language-scss">\r\n<code class="language-scss">\r\n@mixin blockOrHidden($boolean:true) {\r\n  @if $boolean {\r\n      @debug "$boolean is #{$boolean}";\r\n      display: block;\r\n    }\r\n  @else {\r\n      @debug "$boolean is #{$boolean}";\r\n      display: none;\r\n    }\r\n}\r\n.hidden{\r\n	@include blockOrHidden(false);\r\n}\r\n/*编译结果*/\r\n.hidden {\r\n  display: none;\r\n}</code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>SCSS</span></div></div>\r\n			</div>', 'sass、用法笔记', 'sass、前端笔记、sass的基本用法大全', 'SASS是CSS的预处理器（css preprocessor），CSS的一种开发工具，支持加减乘除运算、变量、嵌套、继承（继承上一个选择器）、mixin（代码重用）、颜色函数、插入文件、条件、循环语句');
INSERT INTO `article_details` (`details_id`, `details_love`, `details_haha`, `details_wow`, `details_sad`, `details_content`, `details_tag`, `desc_keyword`, `desc_describe`) VALUES
(27, 0, 0, 0, 0, '<h2 class="title_h2">布局容器</h2>\r\n<blockquote>\r\n<p class="title_p"><span class="orange"><strong>.container：</strong></span>用于固定宽度并支持响应式布局的容器。<br/>\r\n	<span class="orange"><strong>.container-fluid：</strong></span>用于 100% 宽度，占据全部视口（viewport）的容器。\r\n</p>\r\n</blockquote>\r\n	<h2 class="title_h2">栅格系统</h2>\r\n	<blockquote>\r\n	<p class="title_p"><span class="orange"><strong>.col-xs-*：</strong></span>最小尺寸（Extra Small）<br/>\r\n		<span class="orange"><strong>.col-sm-*：</strong></span>小尺寸（small）<br/>\r\n		<span class="orange"><strong>.col-md-*：</strong></span>中尺寸（middle）<br/>\r\n		<span class="orange"><strong>.col-lg-*：</strong></span>大尺寸（large）<br/>\r\n	</p>\r\n	</blockquote>\r\n	<h2 class="title_h2">标题与文本</h2>\r\n	<blockquote>\r\n	<p class="title_p"><span class="orange"><strong>.h1-h6：</strong></span>标题类<br/>\r\n		<span class="orange"><strong>.text-left：</strong></span>文本左对齐<br/>\r\n		<span class="orange"><strong>.text-right：</strong></span>文本右对齐<br/>\r\n		<span class="orange"><strong>.text-center：</strong></span>文本居中对齐<br/>\r\n		<span class="orange"><strong>.text-justify：</strong></span>文本两端对齐<br/>\r\n		<span class="orange"><strong>.text-lowercase：</strong></span>字母小写<br/>\r\n		<span class="orange"><strong>.text-uppercase：</strong></span>字母大写<br/>\r\n		<span class="orange"><strong>.text-capitalize：</strong></span>首字母大写<br/>\r\n		<span class="orange"><strong>.small：</strong></span>小号文本<br/>\r\n		<span class="orange"><strong>.initialism：</strong></span>首字母缩略语<br/>\r\n		<span class="orange"><strong>.text-nowrap：</strong></span>文本不换行\r\n	</p></blockquote>\r\n	<h2 class="title_h2">表格类</h2>\r\n	<blockquote>\r\n	<p class="title_p"><span class="orange"><strong>.table：</strong></span>普通表格<br/>\r\n		<span class="orange"><strong>.table-striped：</strong></span>条纹状表格<br/>\r\n		<span class="orange"><strong>.table-bordered：</strong></span>带边框表格<br/>\r\n		<span class="orange"><strong>.table-hover：</strong></span>带悬停状态表格<br/>\r\n		<span class="orange"><strong>.table-condensed：</strong></span>紧缩表格<br/>\r\n		<span class="orange"><strong>.table-responsive：</strong></span>响应式表格\r\n	</p></blockquote>\r\n	<h2 class="title_h2">表单类</h2>\r\n	<blockquote>\r\n	<p class="title_p">\r\n		<span class="orange"><strong>.form-inline：</strong></span>表单组件一行显示<br/>\r\n		<span class="orange"><strong>.form-horizontal：</strong></span>水平排列表单<br/>\r\n		<span class="orange"><strong>.form-group：</strong></span>表单组<br/>\r\n		<span class="orange"><strong>.input-group：</strong></span>输入框组<br/>\r\n		<span class="orange"><strong>.form-control：</strong></span>输入框样式<br/>\r\n		<span class="orange"><strong>.has-success：</strong></span>表单验证成功<br/>\r\n		<span class="orange"><strong>.has-warning：</strong></span>警告<br/>\r\n		<span class="orange"><strong>.has-error：</strong></span>错误<br/>\r\n		<span class="orange"><strong>.has-feedback：</strong></span>定义验证图标<br/>\r\n		<span class="orange"><strong>.help-block：</strong></span>提示信息<br/>\r\n		<span class="orange"><strong>.form-control-feedback：</strong></span>提示图标<br/>\r\n	</p></blockquote>\r\n	<div class="code-toolbar">\r\n<pre class="line-numbers language-html">\r\n<code class="language-html">\r\n&lt;div class="form-group has-success has-feedback"&gt;\r\n  &lt;label for="hasSuccess1" class="control-label"&gt;验证成功&lt;/label&gt;\r\n  &lt;input type="text" id="hasSuccess1" class="form-control" placeholder="验证成功"&gt;\r\n  &lt;span class="help-block"&gt;信息正确&lt;/span&gt;\r\n  &lt;span class="glyphicon glyphicon-ok form-control-feedback"&gt;&lt;/span&gt;\r\n&lt;/div&gt;\r\n&lt;div class="form-group has-warning has-feedback"&gt;\r\n  &lt;label for="hasWarning1" class="control-label"&gt;警告状态&lt;/label&gt;\r\n  &lt;input type="text" id="hasWarning1" class="form-control" placeholder="警告状态"&gt;\r\n  &lt;span class="help-block"&gt;您当前输入的信息有误&lt;/span&gt;\r\n  &lt;span class="glyphicon glyphicon-warning-sign form-control-feedback"&gt;&lt;/span&gt;\r\n&lt;/div&gt;\r\n&lt;div class="form-group has-error has-feedback"&gt;\r\n  &lt;label for="hasError1" class="control-label"&gt;验证错误&lt;/label&gt;\r\n  &lt;input type="text" id="hasError1" class="form-control" placeholder="验证错误"&gt;\r\n  &lt;span class="help-block"&gt;验证错误&lt;/span&gt;\r\n  &lt;span class="glyphicon glyphicon-remove form-control-feedback"&gt;&lt;/span&gt;\r\n&lt;/div&gt;</code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>HTML</span></div></div>\r\n			</div>\r\n	<h2 class="title_h2">按钮</h2>\r\n	<blockquote>\r\n	<p class="title_p"><span class="orange"><strong>.btn：</strong></span>定义按钮<br/>\r\n		<span class="orange"><strong>.btn-default：</strong></span>默认背景样式按钮<br/>\r\n		<span class="orange"><strong>.btn-info：</strong></span>提示样式<br/>\r\n		<span class="orange"><strong>.btn-primary：</strong></span>首选项<br/>\r\n		<span class="orange"><strong>.btn-success：</strong></span>成功样式<br/>\r\n		<span class="orange"><strong>.btn-warning：</strong></span>警告按钮<br/>\r\n		<span class="orange"><strong>.btn-danger：</strong></span>危险样式按钮<br/>\r\n		<span class="orange"><strong>.btn-link：</strong></span>链接类按钮<br/>\r\n		<span class="orange"><strong>.btn-xs：</strong></span>超小按钮<br/>\r\n		<span class="orange"><strong>.btn-default：</strong></span>默认大小按钮<br/>\r\n		<span class="orange"><strong>.btn-lg：</strong></span>大按钮<br/>\r\n		<span class="orange"><strong>.btn-block：</strong></span>块级按钮<br/>\r\n		<span class="orange"><strong>.disabled：</strong></span>禁用按钮\r\n	</p></blockquote>\r\n	<h2 class="title_h2">图片</h2>\r\n	<blockquote>\r\n		<p class="title_p">\r\n		<span class="orange"><strong>.img-responsive：</strong></span>响应式图片<br/>\r\n		<span class="orange"><strong>.img-rounded：</strong></span>圆角（6px）图片<br/>\r\n		<span class="orange"><strong>.img-circle：</strong></span>正圆图片<br/>\r\n		<span class="orange"><strong>.img-thumbnail：</strong></span>带相框图片<br/>\r\n	</p></blockquote>\r\n	<h2 class="title_h2">文本颜色</h2>\r\n	<blockquote><p class="title_p">\r\n		<span class="orange"><strong>.text-muted：</strong></span>提示，浅灰色<br/>\r\n		<span class="orange"><strong>.text-primary：</strong></span>主要，蓝色<br/>\r\n		<span class="orange"><strong>.text-success：</strong></span>成功，浅绿色<br/>\r\n		<span class="orange"><strong>.text-info：</strong></span>通知，浅蓝色<br/>\r\n		<span class="orange"><strong>.text-warning：</strong></span>警告，黄色<br/>\r\n		<span class="orange"><strong>.text-danger：</strong></span>危险，褐色<br/>\r\n	</p></blockquote>\r\n	<h2 class="title_h2">背景颜色</h2>\r\n	<blockquote><p class="title_p">\r\n		<span class="orange"><strong>.bg-primary：</strong></span>主要，蓝色<br/>\r\n		<span class="orange"><strong>.bg-success：</strong></span>成功，浅绿色<br/>\r\n		<span class="orange"><strong>.bg-info：</strong></span>通知，浅蓝色<br/>\r\n		<span class="orange"><strong>.bg-warning：</strong></span>警告，黄色<br/>\r\n		<span class="orange"><strong>.bg-danger：</strong></span>危险，褐色<br/>\r\n	</p></blockquote>', 'bootstrap、类名', '前端笔记、bootstrap常用类名', '刚自学完Bootstrap后,给大家整理了一些Bootstrap基础的常用类名出来,为了方便开发,熟练记忆.以备之后使用查看。 .container：两边留白非全屏，固定宽度并支持响应式布局的容器。 '),
(28, 0, 0, 0, 0, '<h2 class="title_h2">vue插值</h2>\r\n<p class="title_p">数据绑定最常见的形式就是使用 {{ }}（双大括号）的文本插值：</p>\r\n<div class="code-toolbar">\r\n<pre class="line-numbers language-html">\r\n<code class="language-html">\r\n&lt;div id="people"&gt;&lt;p&gt;{{ name }}&lt;/p&gt;&lt;p&gt;{{ age }}&lt;/p&gt;&lt;p&gt;{{ info() }}&lt;/p&gt;&lt;/div&gt;</code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>HTML</span></div></div>\r\n			</div>\r\n<div class="code-toolbar">\r\n<pre class="line-numbers language-javascript">\r\n<code class="language-javascript">\r\nvar My_app = new Vue({\r\n  el: ''#people'',\r\n  data: {\r\n    name: ''feixiaobo'',\r\n    age:20\r\n  },\r\n  methods:{\r\n  	info:function(){\r\n  		return this.name+" is "+this.age+" years old ";\r\n  	}\r\n  }\r\n});</code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>JavaScript</span></div></div>\r\n			</div>\r\n<p class="title_p">结果：feixiaobo<br/>\r\n	20<br/>\r\n	feixiaobo is 20 years old<br/>\r\n	<code>data</code>用于定义属性，<code>methods</code>用于定义函数，可以<code>return</code>返回一个函数值，<code>{{}}</code>用来输出对象属性和函数返回值。</p>\r\n<h2 class="title_h2">v-model,数据双向绑定</h2>\r\n<div class="code-toolbar">\r\n<pre class="line-numbers language-html">\r\n<code class="language-html">\r\n&lt;div id="app"&gt;\r\n	&lt;p&gt;{{ message }}&lt;/p&gt;\r\n    &lt;input type="text" v-model="message"&gt;\r\n&lt;/div&gt;</code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>HTML</span></div></div>\r\n			</div>\r\n	<div class="code-toolbar">\r\n<pre class="line-numbers language-javascript">\r\n<code class="language-javascript">\r\nvar app = new Vue({\r\n  el: ''#app'',\r\n  data: {\r\n    message: ''''\r\n  }\r\n})</code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>JavaScript</span></div></div>\r\n			</div>\r\n	<h2 class="title_h2">v-bind,给DOM绑定属性</h2>\r\n	<p class="title_p"><i class="iconfont title_i">&#xe666;</i> v-bind:attr="xxx"绑定属性<br/>\r\n		<i class="iconfont title_i">&#xe666;</i> :attr="xxx"绑定属性（缩写）<br/>\r\n		<i class="iconfont title_i">&#xe666;</i> :attr="[xx,xx,xx]"数组形式绑定多个<br/>\r\n		<i class="iconfont title_i">&#xe666;</i> :attr="{}"，json的形式添加多个，key为标签属性的值，value为data数据里面的数据，值为true/false\r\n	</p>\r\n	<div class="code-toolbar">\r\n<pre class="line-numbers language-html">\r\n<code class="language-html">\r\n&lt;div id="app"&gt;\r\n    &lt;a href="#"&gt;&lt;img src="xxx/xxx" v-bind:alt="imgAlt"/&gt;&lt;/a&gt;\r\n    &lt;a href="#" :title="message"&gt;:冒号为简写&lt;/a&gt;\r\n    &lt;div :class="isActive"&gt;:attr="xxx",绑定一个属性&lt;/div&gt;\r\n    &lt;div :class="[colorRed, bgBlue]"&gt;:attr="[xx, xx]",数组的方式添加多个值,相当于addClass&lt;/div&gt;\r\n    &lt;p :class="{bgRed: isbgRed}"&gt;:attr="{}",键值为标签的属性值，key值为data数据的值，true false&lt;/p&gt;\r\n&lt;/div&gt;</code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>HTML</span></div></div>\r\n		</div>\r\n			<div class="code-toolbar">\r\n<pre class="line-numbers language-javascript">\r\n<code class="language-javascript">\r\nvar app = new Vue({\r\n    el: ''#app'',\r\n    data: {\r\n        imgAlt: ''我是一张图片'',\r\n        message: ''我是悬浮信息'',\r\n        isActive : ''active'',\r\n        colorRed: ''color-red'',\r\n        bgBlue: ''bg-blue'',\r\n        isbgRed: true\r\n    }\r\n});</code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>JavaScript</span></div></div>\r\n			</div>\r\n	<h2 class="title_h2">v-html,相当于innerHTML</h2>\r\n		<div class="code-toolbar">\r\n<pre class="line-numbers language-html">\r\n<code class="language-html">\r\n&lt;div id="app"&gt;\r\n	&lt;div v-html="message"&gt;&lt;/div&gt;\r\n&lt;/div&gt;</code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>HTML</span></div></div>\r\n		</div>\r\n	<div class="code-toolbar">\r\n<pre class="line-numbers language-javascript">\r\n<code class="language-javascript">\r\nvar app = new Vue({\r\n    el: ''#app'',\r\n    data: {\r\n        message: ''&lt;p style="color:#fff;"&gt;我啦啦啦啦啦啦。&lt;/p&gt;''\r\n    }\r\n});</code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>JavaScript</span></div></div>\r\n			</div>\r\n	<h2 class="title_h2">v-if与v-else</h2>\r\n	<p class="title_p">v-if 指令将根据表达式 switch 的值(true 或 false )来决定是否插入 元素。</p>\r\n			<div class="code-toolbar">\r\n<pre class="line-numbers language-html">\r\n<code class="language-html">\r\n&lt;div id="app"&gt;\r\n	&lt;div v-if="switch"&gt;\r\n	  off\r\n	&lt;/div&gt;\r\n	&lt;div v-else&gt;\r\n	  on\r\n	&lt;/div&gt;\r\n&lt;/div&gt;</code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>HTML</span></div></div>\r\n	</div>\r\n	<div class="code-toolbar">\r\n<pre class="line-numbers language-javascript">\r\n<code class="language-javascript">\r\nvar app = new Vue({\r\n     el: ''#app'',\r\n     data: {\r\n		switch: true\r\n	}\r\n});</code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>JavaScript</span></div></div>\r\n			</div>\r\n	<h2 class="title_h2">v-on,给DOM绑定一个事件</h2>\r\n				<div class="code-toolbar">\r\n<pre class="line-numbers language-html">\r\n<code class="language-html">\r\n&lt;div id="app"&gt;\r\n    &lt;p&gt;{{name}}&lt;/p&gt;\r\n    &lt;p&gt;{{age}}&lt;/p&gt;\r\n    &lt;!--完整写法--&gt;\r\n    &lt;button v-on:click="info"&gt;按钮&lt;/button&gt;\r\n     &lt;!--缩写--&gt;\r\n    &lt;button @click="info"&gt;按钮&lt;/button&gt;\r\n&lt;/div&gt;</code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>HTML</span></div></div>\r\n	</div>\r\n	<div class="code-toolbar">\r\n<pre class="line-numbers language-javascript">\r\n<code class="language-javascript">\r\nvar app = new Vue({\r\n    el: ''#app'',\r\n    data: {\r\n        name: ''feixiaobo'',\r\n        age: 20\r\n    },\r\n    methods: {\r\n        info: function () {\r\n            this.name = this.name +" is "+ this.age +" years old"\r\n        }\r\n    }\r\n});</code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>JavaScript</span></div></div>\r\n			</div>\r\n	<h2 class="title_h2">v-for,循环语句</h2>\r\n	<div class="code-toolbar">\r\n<pre class="line-numbers language-html">\r\n<code class="language-html">\r\n&lt;div id="app"&gt;\r\n    &lt;ul&gt;\r\n        &lt;li v-bind:class="bgBlue"&gt;{{message}}&lt;/li&gt;\r\n        &lt;li v-for="k in arr"&gt;\r\n            {{k.company}}\r\n        &lt;/li&gt;\r\n    &lt;/ul&gt;\r\n&lt;/div&gt;</code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>HTML</span></div></div>\r\n	</div>\r\n		<div class="code-toolbar">\r\n<pre class="line-numbers language-javascript">\r\n<code class="language-javascript">\r\nvar app = new Vue({\r\n    el: ''#app'',\r\n    data: {\r\n        message: ''BAT公司'',\r\n        bgBlue: ''bg-blue'',\r\n        arr: [\r\n            {\r\n                company: ''百度''\r\n            }, {\r\n                company: ''阿里巴巴''\r\n            }, {\r\n                company: ''腾讯''\r\n            }\r\n        ]\r\n    }\r\n});</code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>JavaScript</span></div></div>\r\n			</div>\r\n	<h2 class="title_h2">过滤器</h2>\r\n	<div class="code-toolbar">\r\n<pre class="line-numbers language-html">\r\n<code class="language-html">\r\n&lt;div id="app"&gt;\r\n  {{ name | capitalize }}\r\n&lt;/div&gt;</code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>HTML</span></div></div>\r\n	</div>\r\n	<div class="code-toolbar">\r\n<pre class="line-numbers language-javascript">\r\n<code class="language-javascript">\r\nvar app = new Vue({\r\n  el: ''#app'',\r\n  data: {\r\n	name: ''feixiaobo''\r\n  },\r\n  filters: {\r\n    capitalize: function (value) {\r\n      if (!value) return ''''\r\n      value = value.toString()\r\n      return value.charAt(0).toUpperCase() + value.slice(1)\r\n    }\r\n  }\r\n})</code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>JavaScript</span></div></div>\r\n			</div>', 'vue基础笔记', 'vue、前端笔记、vue基础教程', 'Vue.js是一套构建用户界面的渐进式框架，认识并学习了vue的语法，今天来记录一下。'),
(29, 0, 0, 0, 0, '<h2 class="title_h2">简介</h2>\r\n<p class="title_p">\r\n	MySQL是一个小型数据库管理系统，开发者为瑞典MySQL AB公司，在2008年1月16日被Sun公司收购，2009年4月20号Sun公司被Oracle收购，目前属于Oracle公司。MySQL被广泛地应用在Internet上的中小型网站中。有体积小、速度快、成本低、开源的特点。\r\n</p>\r\n<h2 class="title_h2">MySQL常用命令</h2>\r\n<blockquote>\r\n<p class="title_p">\r\n	<i class="iconfont title_i">&#xe666;</i> <span class="orange"><strong>启动（停止）mysql服务</strong></span><br/>\r\n	net start(stop) mysql&nbsp;&nbsp;&nbsp;//mysql为服务名<br/>\r\n	<i class="iconfont title_i">&#xe666;</i> <span class="orange"><strong>登录MySQL服务器</strong></span><br/>\r\n	mysql -h localhost -u root -p abc123&nbsp;&nbsp;&nbsp;//-h后面的参数是服务器的主机地址，-u 是mysql的用户名，-p后面参数是用户登录密码<br/>\r\n	<i class="iconfont title_i">&#xe666;</i> <span class="orange"><strong>查看当前所有存在的数据库</strong></span><br/>\r\n	show databases<br/>\r\n	<i class="iconfont title_i">&#xe666;</i> <span class="orange"><strong>创建（删除）数据库</strong></span><br/>\r\n	create(drop) database db_name&nbsp;&nbsp;&nbsp;//db_name为数据库名<br/>\r\n	<i class="iconfont title_i">&#xe666;</i> <span class="orange"><strong>打开（使用）数据库</strong></span><br/>\r\n	use my_database&nbsp;&nbsp;&nbsp;//my_database为数据库名<br/>\r\n	<i class="iconfont title_i">&#xe666;</i> <span class="orange"><strong>查看当前使用的数据库</strong></span><br/>\r\n	select database()<br/>\r\n	<i class="iconfont title_i">&#xe666;</i> <span class="orange"><strong>备份数据库</strong></span><br/>\r\n	mysqldump -h localhost -u root -p db_name[--databases db_name[...]] student,sc>d:\\bak\\result.sql<br/>\r\n	<i class="iconfont title_i">&#xe666;</i> <span class="orange"><strong>恢复（还原）数据</strong></span><br/>\r\n	mysql -u root -p db_name&lt;d:\\bak\\result.sql<br/>\r\n	<i class="iconfont title_i">&#xe666;</i> <span class="orange"><strong>建表</strong></span><br/>\r\n	create table MyClass(\r\n		 id int(2) not null primary key auto_increment,\r\n		 name char(15) not null,\r\n		 sex int(4) not null default ''''\r\n		 );&nbsp;&nbsp;&nbsp;//id主键，自增<br/>\r\n	<i class="iconfont title_i">&#xe666;</i> <span class="orange"><strong>查看表结构</strong></span><br/>\r\n	desc table tb_name&nbsp;&nbsp;&nbsp;//tb_name为表名<br/>\r\n	<i class="iconfont title_i">&#xe666;</i> <span class="orange"><strong>删除表</strong></span><br/>\r\n	drop table tb_name&nbsp;&nbsp;&nbsp;//tb_name表名<br/>\r\n	\r\n</p></blockquote>\r\n<h2 class="title_h2">常用数据类型</h2>\r\n<blockquote>\r\n	<p class="title_p">\r\n		bit/tinyblob/blob/longblob&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//二进制类型<br/>\r\n		char/varchar&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//固定长度字符串和可变长度字符串<br/>\r\n		float（4字节）/double（8字节）&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//单双精度浮点型<br/>\r\n		year（1字节）/date（3字节）/time（3字节）/datetime（8字节）/timestamp&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//日期型数据，年格式（YYYY）、日期格式（YYYY-MM-DD）、时间格式（HH：MM：SS），还有日期和时间的结合格式<br/>\r\n		int（4字节）/tinyint（1字节）/smallint（2字节）/bigint&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//整型数据<br/>\r\n		text/tinytext/longtext&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//文本类型\r\n	</p>\r\n</blockquote>\r\n<h2 class="title_h2">SQL分类</h2>\r\n<blockquote>\r\n<p class="title_p">\r\n	<i class="iconfont title_i">&#xe666;</i> 数据定义语言（DDL），<code>create</code>、<code>alter</code>、<code>drop</code><br/>\r\n	<i class="iconfont title_i">&#xe666;</i> 数据操纵语言（DML），<code>select</code>、<code>insert</code>、<code>update</code>、<code>delete</code><br/>\r\n	<i class="iconfont title_i">&#xe666;</i> 数据控制语言（DCL），<code>grant</code>、<code>revoke</code>\r\n</p></blockquote>\r\n<h2 class="title_h2">实例</h2>\r\n<div><img src="img/student.png"/></div>\r\n<div class="code-toolbar">\r\n<pre class="line-numbers language-sql">\r\n<code class="language-sql">\r\n	/* 查询计算机系的学生 */\r\nselect * from student where s_dept=''计算机系''\r\n	/* 查询学生表前10条记录 */\r\nselect * from student limit 10\r\n	/* 删除学生名为秦达的记录 */\r\ndelete from student where s_name=''秦达''\r\n	/* 更新赵八学生的系别 */\r\nupdate student set s_dept=''日语系'' where s_name=''赵八''\r\n	/* 插入学生信息 */\r\ninsert into student values(null,''张飞飞'',''男'',1995,''化学系'',''北京海定区''); \r\n	/* 修改字段类型 */\r\nalter table student modify s_name varchar(20);</code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>SQL</span></div></div>\r\n				</div>\r\n	<div><img src="img/sdept.png"/></div>\r\n	<p class="title_p"><img src="img/insert.png"/></p>', 'MySQL 基本知识', 'mysql、前端笔记、mysql基础教程', '数据库（database）就是一个存储数据的仓库。为了方便数据的存储和管理，它将数据按照特定的规律存储在磁盘上。通过数据库管理系统，可以有效地组织和管理存储在数据库中的数据。MySQL 为关系型数据库'),
(30, 1, 0, 0, 0, '<h2 class="title_h2">个人简介</h2>\r\n<blockquote>\r\n<p class="title_p">网名：肥小波</p>\r\n<p class="title_p">出生：1999年3月</p>\r\n<p class="title_p">籍贯：江西吉安</p>\r\n<p class="title_p">星座：白羊座</p>\r\n<p class="title_p">职业：程序员</p>\r\n<p class="title_p">爱好：乒乓球、羽毛球、听歌、游泳</p>\r\n<p class="title_p">2019年10月，我的个人博客就正式上线，用的php+mysql做后台，网页结构设计参考别人的模板做的，不是很懂设计。</p>\r\n<p class="title_p">博客主要用途是存放一些我平时的学习笔记、小作品，做这个博客同时也方便自己找工作，自己的第一个网站，想好好的经营下去。</p></blockquote>\r\n<h2 class="title_h2">喜欢的话</h2>\r\n<blockquote>\r\n<p class="title_p">好好学习，天天向上</p>\r\n<p class="title_p">路曼曼其修远兮，吾将上下而求索</p>\r\n<p class="title_p">勇于尝试新鲜的事物，生活才会有新的突破</p>\r\n<p class="title_p">弱肉强食，适者生存</p></blockquote>', '自我介绍', '肥小波、肥小波博客、肥小波自我介绍', '肥小波博客自我介绍'),
(31, 0, 0, 0, 0, '<h2 class="title_h2">概述</h2>\r\n<p class="title_p">存储过程（Stored Procedure）和函数（Stored Function）是在数据库中定义一些完成特定功能的SQL语句集合，经编译后存储在数据库中。存储过程和函数中可包含流程控制语句及各种SQL语句。它们可以接受参数、输出参数、返回单个或者多个结果。</p>\r\n<h2 class="title_h2">优点</h2>\r\n<blockquote>\r\n<p class="title_p">\r\n	<i class="iconfont title_i">&#xe666;</i> 增强了SQL语言的功能和灵活性<br/>\r\n	<i class="iconfont title_i">&#xe666;</i> 能实现较快的执行速度<br/>\r\n	<i class="iconfont title_i">&#xe666;</i> 能够减少网络流量<br/>\r\n	<i class="iconfont title_i">&#xe666;</i> 可被作为一种安全机制来充分利用\r\n</p></blockquote>\r\n<h2 class="title_h2">创建存储过程</h2>\r\n<blockquote>\r\n	<p class="title_p">\r\n		利用<code>create procedure</code>语句来创建，基本语法如下\r\n	</p>\r\n</blockquote>\r\n<div class="code-toolbar">\r\n<pre class="line-numbers language-sql">\r\n<code class="language-sql">\r\ncreate procedure pro_name([[in |out |inout ] 参数名 数据类形...])\r\n\r\n/*① pro_name :存储过程的名称\r\n  ② in表输入参数，out表输出参数，inout表既可以输入也可以输出，默认为in\r\n */</code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>SQL</span></div></div>\r\n				</div>\r\n	<p class="title_p">举个例子，现在我要创建一个存储过程，从数据库my_db的student表中检索出籍贯为江西的学生的基本信息</p>\r\n	<div class="code-toolbar">\r\n<pre class="line-numbers language-sql">\r\n<code class="language-sql">\r\nuse my_db;\r\ndelimiter //\r\ncreate procedure pro_student()\r\nbegin\r\nselect s_id,s_name,s_sex,s_dept,s_address from student where s_address like ''%江西%'' order by s_id;\r\nend;\r\n//\r\ndelimiter ;\r\ncall pro_student();</code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>SQL</span></div></div>\r\n				</div>\r\n	<div><img src="img/pro.png"/></div>\r\n	<p class="title_p">以上的<code>delimiter //</code>是将mysql默认的语句结束符分号改为双斜杠，最后恢复成分号，避免冲突。<code>call</code>调用存储过程。例子比较简单，主要实现了一个学生籍贯的对比查询，没有用到in、out参数，接下来再看看下一个例子，实现通过输入学生学号，查询学生姓名</p>\r\n	<div class="code-toolbar">\r\n<pre class="line-numbers language-sql">\r\n<code class="language-sql">\r\ndelimiter //\r\ndrop PROCEDURE if EXISTS sele_name;\r\ncreate PROCEDURE sele_name(in tmp_sno varchar(10),out res_name varchar(15) CHARACTER SET utf8)\r\nBEGIN\r\nSELECT s_name into res_name from student where s_id=tmp_sno;\r\nend;\r\n//\r\ndelimiter ;\r\ncall sele_name(''5'',@res);\r\nselect @res;</code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>SQL</span></div></div>\r\n				</div>\r\n	<div><img src="img/sele_name.png"/></div>\r\n	<p class="title_p">上述代码中，输入变量为<code>tmp_sno</code>，输出变量为<code>res_name</code>，<code>select</code>语句通过学生学号，查询学生姓名，最终将结果存入<code>res_name</code>中。</p>\r\n	<h2 class="title_h2">存储过程扩展</h2>\r\n	<div class="code-toolbar">\r\n<pre class="line-numbers language-sql">\r\n<code class="language-sql">\r\ndelimiter //\r\ncreate procedure my_proce(a int)\r\nbegin\r\ndeclare i int default 1;\r\ndeclare sum int default 0;\r\nrepeat\r\n	set sum=sum+i;\r\n	set i=i+1;\r\n	until i>a\r\n	end repeat;\r\n	select sum;\r\n	end;\r\n	//\r\n	delimiter ;\r\n	call my_proce(100);</code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>SQL</span></div></div>\r\n				</div>\r\n	<div><img src="img/sum.png"/></div>\r\n	<p class="title_p">存储过程接收一个参数，实现从1加到100</p>\r\n	<h2 class="title_h2">创建存储函数</h2>\r\n	<div class="code-toolbar">\r\n<pre class="line-numbers language-sql">\r\n<code class="language-sql">\r\ncreate function func_name([func_parameter[,..]])\r\nreturns type\r\nroutine_body</code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>SQL</span></div></div>\r\n				</div>\r\n	<div class="code-toolbar">\r\n<pre class="line-numbers language-sql">\r\n<code class="language-sql">\r\ndelimiter //\r\ncreate function func_header(class_no varchar(10))\r\nreturns varchar(8)\r\nbegin\r\n return (select header from class where classno=class_no)\r\nend;\r\n//\r\ndelimiter ;\r\nselect func_header(''1001''); </code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>SQL</span></div></div>\r\n				</div>\r\n	<p class="title_p">以上代码创建了一个名为func_header的存储函数返回某班级的辅导员姓名。注意，指定参数为<code>in</code>，<code>out</code>，<code>inout</code>只对procedure合法，function中总是默认为<code>in</code>参数，<code>returns</code>子句只能对function作指定，而且函数体必须包含一个<code>return value</code>语句</p>\r\n	<h2 class="title_h2">查看存储过程和存储函数</h2>\r\n	<blockquote><p class="title_p">\r\n		<i class="iconfont title_i">&#xe666;</i> 利用<code>show status</code>语句查看<br/>\r\n		语法：show { procedure | function } status [like ''pattern'']<br/>\r\n		show procedure status like ''my_pr'';<br/>\r\n		<i class="iconfont title_i">&#xe666;</i> 利用<code>show create</code>语句查看<br/>\r\n		语法：show create { procedure | function } sp_name<br/>\r\n		show create function func_header;<br/>\r\n		<i class="iconfont title_i">&#xe666;</i> 从<code>information_schema.Routines</code>表中查看存储过程和函数的信息<br/>\r\n	</p></blockquote>\r\n	<div class="code-toolbar">\r\n<pre class="line-numbers language-sql">\r\n<code class="language-sql">\r\nselect * from information_schema.Routines where ROUTINE_NAME=''my_pro'' \\G</code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>SQL</span></div></div>\r\n				</div>\r\n	<h2 class="title_h2">存储过程和存储函数的不同点</h2>\r\n	<blockquote>\r\n		<p class="title_p">\r\n			<i class="iconfont title_i">&#xe666;</i> 存储过程可以返回参数，如记录集，函数只能返回值或者表对象。<br/>\r\n			<i class="iconfont title_i">&#xe666;</i> 存储过程的参数有<code>in</code>，<code>out</code>，<code>inout</code>三种，存储过程声明时不需要返回类型。函数参数只有in，而函数需要描述返回类型，且函数中必须包含一个有效的<code>return</code>语句<br/>\r\n			<i class="iconfont title_i">&#xe666;</i> 函数的限制多，不能用临时表，只能用表变量，有些函数不能用，存储过程限制少<br/>\r\n			<i class="iconfont title_i">&#xe666;</i> 存储过程处理的功能比较复杂，而函数实现的功能针对性强\r\n		</p>\r\n	</blockquote>', 'mysql、存储过程、函数', 'mysql、前端笔记、mysql存储过程', '存储过程（Stored Procedure）和函数（Stored Function）是在数据库中定义一些完成特定功能的SQL语句集合，经编译后存储在数据库中。存储过程和函数中可包含流程控制语句及各种S'),
(32, 0, 0, 0, 0, '<h2 class="title_h2">概述</h2>\r\n	<p class="title_p">触发器（<code>Trigger</code>）是一种特殊的存储过程。触发器基于一个表创建，但可以针对多个表进行操作，因此触发器可以用来对表实施复杂的完整性约束，当触发器所保存的数据发生改变，触发器被自动激活，从而防止对数据进行不正确的修改。比如，当对一个表进行（<code>insert</code>、<code>update</code>、<code>delete</code>）操作时就会激活它执行。 触发器与存储过程的唯一区别是触发器不能执行<code>EXECUTE</code>语句调用，而是在用户执行Transact-SQL语句时自动触发执行。</p>\r\n	<h2 class="title_h2">触发器的优点</h2>\r\n	<p class="title_p">\r\n		<i class="iconfont title_i">&#xe666;</i> 触发器自动执行，在表的数据做了任何修改之后立即激活<br/>\r\n		<i class="iconfont title_i">&#xe666;</i> 触发器可以强制限制，比用<code>CHECK</code>约束所定义的更复杂。与<code>CHECK</code>约束不同的是，触发器可以引用其他表中的列<br/>\r\n		<i class="iconfont title_i">&#xe666;</i> 触发器可以通过数据库中的相关表进行层叠更改\r\n	</p>\r\n	<h2 class="title_h2">创建触发器</h2>\r\n	<blockquote>\r\n		<p class="title_p">\r\n			利用命令创建触发器语法：create Trigger trigger_name trigger_time trigger_event on tb_name for each row trigger_statement;<br/>\r\n		<strong>主要参数含义：</strong>trigger_name：要创建的触发器的名称<br/>\r\n		tb_name：建立触发器的表名<br/>\r\n		trigger_time：指定触发器触发的时机，可以指定为before/after<br/>\r\n		trigger_event：指定激活触发程序的语句的类型，如insert、update、delete<br/>\r\n		for each row：触发器的执行间隔，通知触发器每隔一行执行一次动作<br/>\r\n		trigger_statement：指定触发器所执行的SQL语句，可以用begin、end作为开始和结束\r\n		</p>\r\n	</blockquote>\r\n	<p class="title_p"><span class="orange"><strong>在my_db数据库中，向student表添加一条学生信息时，同时更新class表中的"class_number"字段，实现添加新的学生信息时更新对应班级人数</strong></span></p>\r\n	<div class="code-toolbar">\r\n<pre class="line-numbers language-sql">\r\n<code class="language-sql">\r\nuse my_db;\r\ncreate trigger update_sum after insert on student for each row update class set class_number=class_number+1 where classno = left(new.sno,8)</code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>SQL</span></div></div>\r\n				</div>\r\n	<p class="title_p">确保找到学生的学号，利用<code>left()</code>函数取学生学号的前8位。接下来，再看一个实例，在触发器的SQL语句中使用begin、end，实现当student表中的学生学号发生变更时，同时更新sc表中相应的学生学号信息</p>\r\n	<div class="code-toolbar">\r\n<pre class="line-numbers language-sql">\r\n<code class="language-sql">\r\nuse my_db;\r\ndelimiter //\r\ncreate trigger sc_update after update on student for each row\r\nbegin\r\nif new.sno!=old.sno then\r\n	update sc set sno=new.sno where sno=old.sno;\r\nend if;\r\nend;\r\n//\r\ndelimiter ;</code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>SQL</span></div></div>\r\n				</div>\r\n	<p class="title_p">在触发器的SQL语句中，可以关联表中的任何列，通过使用<code>old</code>和<code>new</code>列名来标识，<code>old.col_name</code>关联现有的行的一列在被更新或删除前的值，<code>new.old_name</code>关联一个新行的插入或更新现有的行的一列的值。对于<code>insert</code>语句，只有<code>new</code>合法，\r\n	对于<code>delete</code>语句，只有<code>old</code>合法，而<code>update</code>语句，new和old可以同时用。</p>\r\n	<h2 class="title_h2">慎用触发器</h2>\r\n	<blockquote>\r\n		<p class="title_p">\r\n			触发器本身并没有什么过错，但如果我们对触发器过分的依赖，势必影响数据库的结构，同时增加了维护的复杂程度\r\n		</p>\r\n	</blockquote>', 'mysql、触发器', 'mysql、前端笔记、mysql触发器教程', '触发器（Trigger）是一种特殊的存储过程。触发器基于一个表创建，但可以针对多个表进行操作，因此触发器可以用来对表实施复杂的完整性约束，当触发器所保存的数据发生改变，触发器被自动激活，从而防止对数据'),
(33, 1, 0, 0, 0, '	<h2 class="title_h2">什么是多表查询</h2>\r\n	<p class="title_p">多表连接查询是指查询同时涉及两个或两个以上的表，连接查询是关系数据库中最主要的查询，表与表之间的连接分为交叉连接（Cross Join）、内连接（Inner Join）、自连接（Self Join）、外连接（Outer Join）。外连接又分为3种，即左外连接（Left Join）、右外连接（Right Join）和全外连接（Full Join）。</p>\r\n	<p class="title_p p_margin_bottom"><span class="orange pp" data-toggle="collapse" data-target="#collapseExample" aria-expanded="false" aria-controls="collapseExample"><i class="iconfont i_block i_transform ii">&#xe655;</i> <strong>学生表：</strong></span><br/>\r\n		<div class="collapse" id="collapseExample"><div class="well"><img src="img/more_student.png"/></div></div><span class="orange pp" data-toggle="collapse" data-target="#collapseExample1" aria-expanded="false" aria-controls="collapseExample1"><i class="iconfont i_block i_transform ii">&#xe655;</i> <strong>课程表：</strong></span><br/>\r\n		<div class="collapse" id="collapseExample1"><div class="well"><img src="img/more_course.png"/></div></div><span class="orange pp" data-toggle="collapse" data-target="#collapseExample2" aria-expanded="false" aria-controls="collapseExample2"><i class="iconfont i_block i_transform ii">&#xe655;</i> <strong>成绩表：</strong></span><br/>\r\n		<div class="collapse" id="collapseExample2"><div class="well"><img src="img/more_sc.png"/></div></div>\r\n	</p>\r\n	<h2 class="title_h2">交叉连接</h2>\r\n	<blockquote>\r\n		<p class="title_p">\r\n			交叉连接又称笛卡儿积连接，是指两个表之间做笛卡儿积操作，得到结果集的行数是两个表的行数的乘积。例如，成绩表（sc）和课程表（course）表进行交叉连接。<br/>\r\n			select A.*,B.* from course A,sc B;&nbsp;&nbsp;&nbsp;&nbsp;//结果行数=A表数据条数*B表数据条数\r\n		</p>\r\n	</blockquote>\r\n	<h2 class="title_h2">内连接</h2>\r\n	<blockquote>\r\n		<p class="title_p">\r\n			内连接命令的一般格式：\r\n		</p>\r\n	</blockquote>\r\n	<div class="code-toolbar">\r\n<pre class="line-numbers language-sql">\r\n<code class="language-sql">\r\n	/*方法一*/\r\nselect A.*,B.* from student A,sc B where A.sno=B.sno;\r\n	/*方法一*/\r\nselect A.*,B.* from student A inner join sc B on A.sno=B.sno</code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>SQL</span></div></div>\r\n				</div>\r\n	<p class="title_p">第一种命令格式的连接类型在where子句中指定，第二种命令格式的连接类型在from子句中指定</p>\r\n	<div><img src="img/more_nei.png"/></div>\r\n	<p class="title_p">连接条件是指在连接查询中连接两个表的条件，比较运算符用等号"="，此时称为等值连接，若在等值连接中把目标列中的重复字段去掉则称为自然连接。</p>\r\n	<div class="code-toolbar">\r\n<pre class="line-numbers language-sql">\r\n<code class="language-sql">\r\nselect student.sno,sname,ssex,sbirthday,sdept,cno,degree from student,sc where student.sno=sc.sno;</code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>SQL</span></div></div>\r\n				</div>\r\n				<div><img src="img/more_deng.png"/></div>\r\n	<p class="title_p">自然连接实例：输出所有女学生的学号、姓名、课程号及成绩</p>\r\n	<div class="code-toolbar">\r\n<pre class="line-numbers language-sql">\r\n<code class="language-sql">\r\n	/*方法一*/\r\nSELECT A.sno,sname,cno,degree from student A INNER JOIN sc B on A.sno=B.sno where ssex=''女''\r\n	/*方法二*/\r\nselect A.sno,sname ,cno,degree from student A,sc B where A.sno=B.sno and ssex=''女''</code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>SQL</span></div></div>\r\n				</div>\r\n		<div><img src="img/more_ziran.png"/></div>\r\n	<h2 class="title_h2">自连接</h2>\r\n	<blockquote>\r\n		<p class="title_p">\r\n			连接操作不只是在不同表之间进行，一张表也可以进行自身连接操作，即将同一个表的不同行进行连接起来。在自连接中，必须为表指定两个别名，使之在逻辑上成为两张表。\r\n		</p>\r\n	</blockquote>\r\n	<p class="title_p">查询同时选修了C01和C03课程的学生学号</p>\r\n		<div class="code-toolbar">\r\n<pre class="line-numbers language-sql">\r\n<code class="language-sql">\r\nSELECT A.sno from sc A,sc B where A.sno=B.sno and A.cno=''C01'' and B.cno=''C03''</code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>SQL</span></div></div>\r\n				</div>\r\n	<div><img src="img/more_zi.png"/></div>\r\n	<p class="title_p">查询与刘伟在同一个系学习的学生的姓名和所在系</p>\r\n	<div class="code-toolbar">\r\n<pre class="line-numbers language-sql">\r\n<code class="language-sql">\r\nSELECT B.sname,B.sdept from student A,student B where A.sdept=B.sdept and A.sname=''刘伟'' and B.sname!=''刘伟''</code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>SQL</span></div></div>\r\n				</div>\r\n	<div><img src="img/more_zi2.png"/></div>\r\n	<h2 class="title_h2">外连接</h2>\r\n	<blockquote>\r\n		<p class="title_p">\r\n			在自然连接中，只有在两个表中匹配的行才能在结果集中出现。而在外连接中可以只限制一个表，而对另外一个表不加限制（所有的行都出现在结果集中）\r\n		</p>\r\n	</blockquote>\r\n	<p class="title_p">实例：查询每个学生及其选修课的情况。即使没选的同学也要显示出来，以学生表为准</p>\r\n	<div class="code-toolbar">\r\n<pre class="line-numbers language-sql">\r\n<code class="language-sql">\r\nSELECT student.sno,sname,ssex,sbirthday,sdept,cno,degree from student left join sc on student.sno=sc.sno</code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>SQL</span></div></div>\r\n				</div>\r\n		<div><img src="img/more_wai.png"/></div>', 'mysql、多表查询', 'mysql、前端笔记、mysql多表查询', '多表连接查询是指查询同时涉及两个或两个以上的表，连接查询是关系数据库中最主要的查询，表与表之间的连接分为交叉连接（Cross Join）、内连接（Inner Join）、自连接（Self Join）、'),
(34, 0, 0, 0, 0, '	<h2 class="title_h2">视图概述</h2>\r\n	<blockquote>\r\n		<p class="title_p">\r\n			视图是从一个或者几个基本表或者视图中导出的虚拟表，是从现有基表中抽取若干子集组成用户的"专用表"，包含一系列带有名称的列和行数据。在定义一个视图时，只是把其定义存放在数据库中，并不直接存储视图对应的数据。\r\n		</p>\r\n	</blockquote>\r\n	<h2 class="title_h2">视图的优点</h2>\r\n	<blockquote>\r\n		<p class="title_p">\r\n			<i class="iconfont title_i">&#xe666;</i> 简化对数据的操作，每次执行相同的查询时，只要一条简单的查询视图语句即可<br/>\r\n			<i class="iconfont title_i">&#xe666;</i> 数据集中显示，通过创建视图，让数据更清晰<br/>\r\n			<i class="iconfont title_i">&#xe666;</i> 数据库重构，不影响程序的运行，使用视图可以重新保持原有的结构关系，从而使外模式保持不变<br/>\r\n			<i class="iconfont title_i">&#xe666;</i> 安全机制，通过视图，用户只能查看和修改他们能看到的数据，其他数据不可见\r\n		</p>\r\n	</blockquote>\r\n	<h2 class="title_h2">视图的定义</h2>\r\n	<blockquote>\r\n		<p class="title_p">\r\n			create VIEW view_name [(column [,...n])] as select_statement [with check option];<br/>\r\n			<strong>参数含义：</strong>view_name：视图名<br/>\r\n			column：声明视图中使用的列名<br/>\r\n			as：声明视图要完成的操作<br/>\r\n			select_statement：定义视图的select命令语句<br/>\r\n			with check option：强制通过视图修改的数据满足select语句的选择条件\r\n		</p>\r\n	</blockquote>\r\n	<p class="title_p">定义视图my_view，查询所有选修数学课程的学生的学号、姓名、课程名称和成绩</p>\r\n		<div class="code-toolbar">\r\n<pre class="language-sql line-numbers">\r\n<code class="language-sql">\r\ncreate or replace view my_view as select A.sno,sname,cname,degree from student A,course B,sc C where A.sno=C.sno and B.cno=C.cno and cname=''数学''</code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>SQL</span></div></div>\r\n				</div>\r\n	<div><img src="img/view.png"/></div>\r\n	<h2 class="title_h2">视图的使用</h2>\r\n	<blockquote>\r\n		<p class="title_p">\r\n			视图的使用主要包括视图的检索，以及通过视图对基表进行插入、修改、删除操作。视图的检索几乎没什么限制，但是对通过视图实现表的插入、修改、删除操作则有一定的限制条件。\r\n		</p>\r\n	</blockquote>\r\n	<p class="title_p">\r\n		<i class="iconfont title_i">&#xe666;</i> <strong>通过视图修改数据</strong><br/>\r\n		视图可以使用<code>insert</code>命令插入数据，当执行<code>insert</code>命令时，实际上是向视图所引用的基表插入行\r\n	</p>\r\n	<div class="code-toolbar">\r\n<pre class="language-sql line-numbers">\r\n<code class="language-sql">\r\n	/*创建视图*/\r\nCREATE or replace view my_view1 as SELECT sno,sname,saddress from student;\r\n	/*向视图插入数据*/\r\nINSERT into my_view1 VALUES(''2005040401'',''王龙龙'',''陕西省西安市'');\r\n	/*查看student表*/</code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>SQL</span></div></div>\r\n				</div>\r\n	<div><img src="img/view1.png"/></div>\r\n	<p class="title_p"><span class="orange"><strong>注意：</strong></span>如果视图中有下面所述属性，则插入、更新或删除操作将失败<br/>\r\n		<i class="iconfont title_i">&#xe666;</i> 视图定义中的<code>from</code>子句包含两个或多个表，<code>select</code>选择项列表达式包含多个表的列<br/>\r\n		<i class="iconfont title_i">&#xe666;</i> 视图的列是从集合函数派生<br/>\r\n		<i class="iconfont title_i">&#xe666;</i> 视图中的<code>select</code>语句包含<code>group by</code>子句或<code>distinct</code>选项，或者<code>having</code>、<code>union</code>等关键字\r\n	</p>\r\n	<p class="title_p"><i class="iconfont title_i">&#xe666;</i> <strong>修改视图</strong><br/>\r\n		alter view my_view1 as select sno,sname from student&nbsp;&nbsp;&nbsp;&nbsp;//如果在创建视图时使用了<code>with check option</code>选项，则在使用<code>alter view</code>命令，也必须包括这些选项\r\n	</p>\r\n	<h2 class="title_h2">视图的删除</h2>\r\n	<div class="code-toolbar">\r\n<pre class="language-sql line-numbers">\r\n<code class="language-sql">\r\ndrop view my_view1</code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>SQL</span></div></div>\r\n				</div>', 'mysql、视图', 'mysql、前端笔记、mysql中的视图', '视图是从一个或者几个基本表或者视图中导出的虚拟表，是从现有基表中抽取若干子集组成用户的"专用表"，包含一系列带有名称的列和行数据。在定义一个视图时，只是把其定义存放在数据库中，并不直接存储视图对应的数'),
(35, 0, 0, 0, 0, '	<blockquote>\r\n	<p class="title_p">在自学php的过程中，学习到如何实现文件上传到服务器，现在来记录一下，php可以上传的文件类型有多种，如图像文件、文本文件、ppt文件、音视频文件。写了个小demo，有不正确的地方望指教，谢谢<br/>\r\n		<strong>upload.php代码如下，客户端设置表单，提交方式为post，表单添加<code>enctype="multipart/form-data"</code></strong>\r\n	</p></blockquote>\r\n	<div class="code-toolbar">\r\n<pre class="language-html line-numbers">\r\n<code class="language-html">\r\n&lt;!DOCTYPE html&gt;\r\n&lt;html lang="zh"&gt;\r\n&lt;head&gt;\r\n	&lt;meta charset="UTF-8" /&gt;\r\n	&lt;meta name="viewport" content="width=device-width, initial-scale=1.0" /&gt;\r\n	&lt;meta http-equiv="X-UA-Compatible" content="ie=edge" /&gt;\r\n	&lt;title&gt;文件上传&lt;/title&gt;\r\n&lt;/head&gt;\r\n&lt;body&gt;\r\n	&lt;form action="upload_doAction.php" method="post" enctype="multipart/form-data"&gt;\r\n	请选择您要上传的文件：\r\n	&lt;input type="file" name="myFile"/&gt;&lt;br/&gt;\r\n	&lt;input type="submit" value="上传文件" /&gt;\r\n	&lt;/form&gt;\r\n&lt;/body&gt;\r\n&lt;/html&gt;</code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>HTML</span></div></div>\r\n				</div>\r\n	<p class="title_p"><strong>upload_doAction.php</strong></p>\r\n	<div class="code-toolbar">\r\n<pre class="language-php line-numbers">\r\n<code class="language-php">\r\n&lt;?php\r\nheader(''content-type:text/html;charset=utf8'');\r\ninclude ''upload_func.php'';\r\n$fileInfo=@$_FILES[''myFile''];\r\n$newName=uploadFile($fileInfo);\r\necho $newName;\r\n?&gt;</code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>PHP</span></div></div>\r\n				</div>\r\n	<p class="title_p"><strong>upload_func.php</strong></p>\r\n	<div class="code-toolbar">\r\n<pre class="language-php line-numbers">\r\n<code class="language-php">\r\n&lt;?php\r\n	//$fileInfo=@$_FILES[''myFile''];\r\n	function uploadFile($fileInfo,$allowExt=array(''jpeg'',''jpg'',''png'',''gif''),$maxSize=2097152,$uploadPath=''uploads'',$flag=true){\r\n	//判断错误号\r\n	if($fileInfo[''error'']>0){\r\n		switch ($fileInfo[''error'']) {\r\n			case 1:\r\n				$res=''上传文件超过了PHP配置文件中upload_max_filesize选项的值'';				\r\n				break;\r\n			case 2:\r\n				$res=''超过了表单限制'';\r\n			break;\r\n			case 3:\r\n				$res=''文件部分上传'';\r\n			break;\r\n			case 4:\r\n				$res=''没有选择上传文件'';\r\n			break;\r\n			case 6:\r\n				$res=''没有找到临时目录'';\r\n			break;\r\n			case 7:\r\n			case 8:\r\n				$res=''系统错误'';\r\n			break;	\r\n		}\r\n		exit($res);\r\n	}\r\n	$ext=pathinfo($fileInfo[''name''],PATHINFO_EXTENSION);\r\n	//$allowExt=array(''jpeg'',''jpg'',''png'',''gif'');\r\n	//检测上传文件的类型\r\n	if(!in_array($ext, $allowExt)){\r\n		exit(''非法文件类型'');\r\n	}\r\n	//$maxSize=2097152;\r\n	//检测上传文件大小是否符合规范\r\n	if($fileInfo[''size'']>$maxSize){\r\n		exit(''上传文件过大'');\r\n	}\r\n	//检测图片是否为真实图片类型\r\n	if($flag){\r\n		if(!getimagesize($fileInfo[''tmp_name''])){\r\n			exit(''不是真实图片类型'');\r\n		}\r\n	}\r\n	//检测文件是否通过HTTP post方式上传来的\r\n	if(!is_uploaded_file($fileInfo[''tmp_name''])){\r\n		exit(''文件不是通过HTTP POST方式上传上来的'');\r\n	}\r\n	//$uploadPath=''uploads'';\r\n	if(!file_exists($uploadPath)){\r\n		mkdir($uploadPath,0777,true);\r\n		chmod($uploadPath,0777);\r\n	}\r\n	$uniName=md5(uniqid(microtime(true),true)).''.''.$ext;\r\n	$destination=$uploadPath.''/''.$uniName;\r\n	if(!@move_uploaded_file($fileInfo[''tmp_name''], $destination)){\r\n		exit(''文件移动失败'');\r\n	}\r\n	echo ''文件上传成功'';\r\n	}\r\n?&gt;</code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>PHP</span></div></div>\r\n				</div>\r\n	<h2 class="title_h2">解析</h2>\r\n	<p class="title_p">\r\n		<i class="iconfont title_i">&#xe666;</i> $_FILES保存文件的信息<br/>\r\n		<i class="iconfont title_i">&#xe666;</i> $_FILES["myFile"]["name"]上传文件的名称<br/>\r\n		<i class="iconfont title_i">&#xe666;</i> $_FILES["myFile"]["tmp_name"]文件上传到服务器的临时名<br/>\r\n		<i class="iconfont title_i">&#xe666;</i> $_FILES["myFile"]["error"]上传文件的错误号<br/>\r\n		<i class="iconfont title_i">&#xe666;</i> $_FILES["myFile"]["size"]文件的大小<br/>\r\n		<i class="iconfont title_i">&#xe666;</i> $_FILES["myFile"]["type"]上传文件的MIME类型<br/>\r\n		<code>in_array()</code>搜索数组中是否存在指定的值<br/>\r\n		<code>mkdir(path,mode,recursive,context)</code>建立一个新的子目录，path为创建的目录的名称，mode为权限，默认0777，recursive是否设置递归模式<br/>\r\n		<code>move_uploaded_file()</code>将上传的文件移动到新位置<br/>\r\n		<code>pathinfo()</code>以数组的形式返回文件路径的信息\r\n	</p>', 'php、文件上传', 'php、前端笔记、php中的文件上传', '利用PHP实现文件的上传，由在客户端这边选择文件，上传到服务器。其中，在上传文件中，考虑到对上传文件大小的限制、类型限制等问题'),
(36, 0, 0, 0, 0, '	<h2 class="title_h2">概述</h2>\r\n	<blockquote><p class="title_p">\r\n		Cookie与Session是两种不同的存储机制。Cookie常用于识别用户，是一种服务器留在用户计算机上的小文件，每当同一台计算机通过浏览器请求页面时，这台计算机将会发送Cookie。Session变量用于存储关于用户会话的信息，存储在服务器端。\r\n	</p></blockquote>\r\n	<h2 class="title_h2">Cookie</h2>\r\n	<blockquote>\r\n		<p class="title_p">Cookie是Web服务器暂时存储在用户硬盘上的一个小文本文件，Web服务可以利用Cookie来保存和维护很多与网站有关的信息。Cookie常用作以下用途：<br/>\r\n			<i class="iconfont title_i">&#xe666;</i> 记录访客的某些信息。可以利用Cookie记录用户访问页面的次数或者用户登录的用户名和密码等信息（Cookie文件中的内容大都经过加密处理）<br/>\r\n			<i class="iconfont title_i">&#xe666;</i> 在网页间传递变量。利用Cookie可以实现便签页之间的通信，Cookie把需要在页面间传递的变量先保存起来，然后到另一个页面再读取即可<br/>\r\n			<i class="iconfont title_i">&#xe666;</i> 将查看过的页面存储在Cookie临时文件夹中，提高访问速度\r\n		</p>\r\n	</blockquote>\r\n	<p class="title_p"><span class="orange"><strong>创建Cookie</strong></span></p>\r\n	<blockquote>\r\n		<p class="title_p">\r\n			 在PHP中，<code>setcookie()</code>函数用于创建cookie。Cookie是HTTP头标的组成部分，而头标必须在页面其他内容之前发送，因此，一般将该函数放在网页代码顶端。格式：\r\n			 bool setcookie(string $name[,string $value[,int $expire[,string $path[,string $domain[,bool $secure]]]]]);\r\n		</p>\r\n	</blockquote>\r\n	<div class="code-toolbar">\r\n<pre class="language-php line-numbers">\r\n<code class="language-php">\r\n&lt;?php\r\n	$value1 = ''I like apple'';\r\n	$value2 = ''I like orange'';\r\n	setcookie(''Cookie1'',$value1);   //网页关闭，cookie过期\r\n	setcookie(''Cookie2'',$value2,time()+60);   //1分钟后过期\r\n	setcookie(''Cookie2'',$value2,time()+3600);   //1小时后过期\r\n	?&gt;</code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>PHP</span></div></div>\r\n			</div>\r\n	<p class="title_p"><span class="orange"><strong>读取Cookie</strong></span></p>\r\n	<blockquote>\r\n		<p class="title_p">\r\n			通过超级全局数组<code>$_COOKIE[]</code>读取浏览器端的Cookie值\r\n		</p>\r\n	</blockquote>\r\n	<div class="code-toolbar">\r\n<pre class="language-php line-numbers">\r\n<code class="language-php">\r\n&lt;?php\r\nheader(''content-type:text/html;charset=utf8'');\r\n	date_default_timezone_set("PRC");\r\n	if(!isset($_COOKIE["visittime"])){\r\n		setcookie("visittime",date("y-m-d H:i:s"));\r\n		echo "欢迎初次光临本网站"."<br/>";\r\n	}else{\r\n		setcookie("visittime",date("y-m-d H:i:s"),time()+3600);\r\n		echo "您上次访问网站的时间为： ".$_COOKIE["visittime"]."<br>";\r\n	}\r\n	echo "您本次访问网站的时间为： ".date("y-m-d H:i:s");\r\n	?&gt;</code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>PHP</span></div></div>\r\n			</div>\r\n	<p class="title_p"><span class="orange"><strong>删除Cookie</strong></span></p>\r\n	<blockquote>\r\n		<p class="title_p">\r\n			将cookie的过期时间设置成过去时间即可\r\n		</p>\r\n	</blockquote>\r\n	<div class="code-toolbar">\r\n<pre class="language-php line-numbers">\r\n<code class="language-php">\r\n&lt;?php\r\nsetcookie("visittime","",time()-999);\r\n	?&gt;</code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>PHP</span></div></div>\r\n				</div>\r\n	<h2 class="title_h2">Session</h2>\r\n	<blockquote>\r\n		<p class="title_p">\r\n			PHP Session变量用于存储有关用户会话的信息，或更改用户会话的设置。由于HTTP是无状态协议，对于事务处理没有记忆能力，便可以通过session在服务器上存储用户的相关信息（比如用户名称、购买商品等），如果没有session，则用户每进入一个页面都需要重新登录一次。session的工作机制\r\n			是为每一个访问者创建一个唯一的id（UID），并基于这个UID来存储变量。UID存储在Cookie中。\r\n		</p>\r\n	</blockquote>\r\n	<p class="title_p"><span class="orange"><strong>启动会话</strong></span></p>\r\n	<div class="code-toolbar">\r\n<pre class="language-php line-numbers">\r\n<code class="language-php">\r\n&lt;?php\r\nsession_start();   //创建一个会话\r\n$_SESSION[''se'']=''会话1'';   //在SESSION中存储数据\r\necho $_SESSION[''se''];   //输出SESSION中存储的数据\r\n	?&gt;</code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>PHP</span></div></div>\r\n			</div>\r\n	<p class="title_p"><span class="orange"><strong>使用会话</strong></span></p>\r\n	<div class="code-toolbar">\r\n<pre class="language-php line-numbers">\r\n<code class="language-php">\r\n&lt;?php\r\nsession_start();\r\n	if(!empty($_SESSION[''user''])){\r\n		$user = $_SESSION[''user''];\r\n		echo $user;	\r\n	}else{\r\n		$_SESSION[''user'']="Mike";\r\n	}\r\n	?&gt;</code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>PHP</span></div></div>\r\n			</div>\r\n	<p class="title_p"><span class="orange"><strong>删除会话</strong></span></p>\r\n	<div class="code-toolbar">\r\n<pre class="language-php line-numbers">\r\n<code class="language-php">\r\n&lt;?php\r\n	unset($_SESSION[''user'']);  //删除单个会话\r\n	$_SESSION=array();    //注销所有会话变量\r\n	session_destroy();   //结束当前会话\r\n	?&gt;</code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>PHP</span></div></div>\r\n				</div>\r\n	<p class="title_p"><span class="orange"><strong>session生存期</strong></span></p>\r\n	<div class="code-toolbar">\r\n<pre class="language-php line-numbers">\r\n<code class="language-php">\r\n&lt;?php\r\n$time = 24*3600;\r\n//方法一\r\n	setcookie(session_name(),session_id(),time+$time,"/");\r\n//方法二\r\n	session_set_cookie_params($time);\r\n	?&gt;</code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>PHP</span></div></div>\r\n				</div>', 'php、cookie与session’', '前端笔记、php中的cookie与session', 'Cookie与Session是两种不同的存储机制。Cookie常用于识别用户，是一种服务器留在用户计算机上的小文件，每当同一台计算机通过浏览器请求页面时，这台计算机将会发送Cookie。Session'),
(37, 1, 0, 0, 0, '	<p class="title_p">利用字符串截取方法实现简单的打字机效果</p>\r\n	<div class="code-toolbar">\r\n<pre class="line-numbers language-html">\r\n<code class="language-html">\r\n&lt;!DOCTYPE html&gt;\r\n&lt;html lang="en"&gt;\r\n&lt;head&gt;\r\n  &lt;meta charset="UTF-8"&gt;\r\n  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;\r\n  &lt;meta http-equiv="X-UA-Compatible" content="ie=edge"&gt;\r\n  &lt;title&gt;打字机特效&lt;/title&gt;\r\n&lt;/head&gt;\r\n&lt;body&gt;\r\n  &lt;p&gt;&lt;/p&gt;\r\n  &lt;script&gt;\r\n    var oP = document.getElementsByTagName(''p'')[0];\r\n    var str = ''儿时凿壁偷了谁家的光,宿昔不梳 忆苦十年寒窗,如今灯下闲读 红袖添香,半生浮名只是虚妄,三月 一路烟霞 莺飞草长'';\r\n    var i = 0;\r\n    var timer = setInterval(function() {\r\n      var txt = str.substring(0, ++i);\r\n      oP.innerText = txt + ''_'';\r\n      if (i == str.length) {\r\n        clearInterval(timer);\r\n        oP.innerText = txt + '''';\r\n      }\r\n    }, 200);\r\n  &lt;/script&gt;\r\n&lt;/body&gt;\r\n\r\n&lt;/html&gt;</code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>HTML</span></div></div>\r\n				</div>\r\n	<a href="daziji.html" class="sharebtn" target="_blank">DEMO展示</a>', 'js打字机', 'js、javascript打字机特效、前端笔记', '利用js字符串截取做一个打字机效果');
INSERT INTO `article_details` (`details_id`, `details_love`, `details_haha`, `details_wow`, `details_sad`, `details_content`, `details_tag`, `desc_keyword`, `desc_describe`) VALUES
(38, 1, 0, 0, 0, '<p class="title_p">利用flex做一个瀑布流相册，pc端和移动端皆可适配</p>\r\n	<div class="code-toolbar">\r\n<pre class="line-numbers language-html">\r\n<code class="language-html">\r\n&lt;!DOCTYPE html&gt;\r\n&lt;html&gt;\r\n	&lt;head&gt;\r\n		&lt;meta charset="utf-8"&gt;\r\n		&lt;title&gt;gril&lt;/title&gt;\r\n		&lt;style type="text/css"&gt;\r\n			*{margin: 0;padding: 0;}\r\n			.flex{display: flex;flex-flow: row nowrap;justify-content:space-between;align-items: flex-start;}\r\n			.box{width: 100%;margin-left: 0.5rem;}\r\n			.box img{width: 100%;height:auto;border:0;display: block;opacity: .45;margin-bottom: 0.5rem;}\r\n			.box img:hover{opacity: 1;}\r\n		&lt;/style&gt;\r\n	&lt;/head&gt;\r\n	&lt;body&gt;\r\n		&lt;div class="wrap flex"&gt;\r\n			&lt;div class="box"&gt;\r\n				&lt;img src="img/animal1.jpg" alt=""&gt;\r\n				&lt;img src="img/animal2.jpg" alt=""&gt;\r\n				&lt;img src="img/animal3.jpg" alt=""&gt;\r\n				&lt;img src="img/animal4.jpg" alt=""&gt;\r\n				&lt;img src="img/animal5.jpg" alt=""&gt;\r\n				&lt;img src="img/animal6.jpg" alt=""&gt;\r\n				&lt;img src="img/animal2.jpg" alt=""&gt;\r\n			&lt;/div&gt;\r\n			&lt;div class="box"&gt;\r\n				&lt;img src="img/animal4.jpg" alt=""&gt;\r\n				&lt;img src="img/animal2.jpg" alt=""&gt;\r\n				&lt;img src="img/animal1.jpg" alt=""&gt;\r\n				&lt;img src="img/animal3.jpg" alt=""&gt;\r\n				&lt;img src="img/animal6.jpg" alt=""&gt;\r\n				&lt;img src="img/animal4.jpg" alt=""&gt;\r\n				&lt;img src="img/animal5.jpg" alt=""&gt;\r\n			&lt;/div&gt;\r\n			&lt;div class="box"&gt;\r\n				&lt;img src="img/animal1.jpg" alt=""&gt;\r\n				&lt;img src="img/animal5.jpg" alt=""&gt;\r\n				&lt;img src="img/animal6.jpg" alt=""&gt;\r\n				&lt;img src="img/animal2.jpg" alt=""&gt;\r\n				&lt;img src="img/animal1.jpg" alt=""&gt;\r\n				&lt;img src="img/animal3.jpg" alt=""&gt;\r\n				&lt;img src="img/animal4.jpg" alt=""&gt;\r\n				&lt;img src="img/animal5.jpg" alt=""&gt;\r\n			&lt;/div&gt;\r\n		&lt;/div&gt;\r\n	&lt;/body&gt;\r\n&lt;/html&gt;</code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>HTML</span></div></div>\r\n				</div>\r\n	<a href="flex_pic.html" class="sharebtn" target="_blank">DEMO展示</a>', 'flex、相册', 'flex、前端笔记、flex相册', '今天，学了flex布局，利用它来简单实现瀑布流布局相册'),
(39, 1, 0, 0, 0, '<blockquote><p class="title_p">期末作业做了一个移动端的首页，一个小练习来凑个数，(#^.^#)，在移动端访问比较好哟</p></blockquote>\r\n	<a href="flex_index.html" class="sharebtn" target="_blank">DEMO展示</a>', '移动端首页', '移动端首页、前端案例、flex首页', '期末作业做了一个移动端的首页，一个小练习来凑个数，(#^.^#)，在移动端访问比较好哟'),
(40, 0, 0, 0, 0, '	<blockquote><p class="title_p">jquery实现一个图片展示，实现原理很简单，点击图片后获取它的src属性，把其值传给显示盒子里头的图片路径就可以了</p></blockquote>\r\n	<div class="code-toolbar">\r\n<pre class="line-numbers language-javascript">\r\n<code class="language-javascript">\r\n&lt;script&gt;\r\n    var index=0;\r\n //显示遮罩层   大图展示区域  \r\n  $(".Img img").click(function(){\r\n   $(".str,.show").show();   //显示\r\n   //获取自身的图片地址\r\n   var bimg= $(this).attr(''src'');\r\n //获取过来的图片地址改变给大图显示框的img图片地址\r\n   $(".show img.but").attr(''src'',bimg);\r\n     index=$(this).index();\r\n\r\n  });\r\n//关闭遮罩层\r\n$(".str").click(function(){\r\n $(".str,.show").hide();   //隐藏\r\n});\r\n\r\n//点击右键切换下一张\r\n$(".show .right").click(function(){\r\n  index++;   //序列号+1\r\n  if(index>8){index=0}\r\n  var bimg=$(".Img img").eq(index).attr(''src'');//大图地址不断随着序列号变换\r\n   $(".show img.but").attr(''src'',bimg);\r\n});\r\n//左键\r\n$(".show .left").click(function(){\r\n  index--;   //序列号-1\r\n  if(index<0){index=8}\r\n  var bimg=$(".Img img").eq(index).attr(''src'');//大图地址不断随着序列号变换\r\n   $(".show img.but").attr(''src'',bimg);\r\n});\r\n&lt;/script&gt;</code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>JavaScript</span></div></div>\r\n				</div>\r\n	<a href="pic_show.html" class="sharebtn" target="_blank">DEMO展示</a>', 'jq照片墙', 'jq、前端笔记、jquery照片墙', 'jquery实现一个图片展示，实现原理很简单，点击图片后获取它的src属性，把其值传给显示盒子里头的图片路径就可以了'),
(41, 1, 0, 0, 0, '	<blockquote><p class="title_p">使用js写了个q弹简易计算器，点击查看</p></blockquote>\r\n	<div class="code-toolbar">\r\n<pre class="line-numbers language-javascript">\r\n<code class="language-javascript">\r\n&lt;script type="text/javascript"&gt;\r\n	// 获取id = "result" 文本框对象\r\n	var resultDom = document.getElementById("result");\r\n	// 操作符锁\r\n	var operate = true;\r\n	// 锁\r\n	var xop = true;\r\n	// 点击计算器键盘执行的操作\r\n	function command(num){\r\n		var str = resultDom.value;\r\n		// 如果是0 , 就用""填充\r\n		str = (str == "0" ? "":str);\r\n		// 拼接点击数字\r\n		str += num;\r\n		// 赋值给文本框\r\n		resultDom.value = str;\r\n		operate = true;\r\n		paly(num);\r\n	}\r\n	// 播放声音\r\n	function paly(num){\r\n		var playDom = document.getElementById("audioBox");\r\n		playDom.innerHTML = "<embed src=''wav/"+num+".wav'' width=''0'' height=''0''></embed>";\r\n	}\r\n	// 操作符\r\n	function tools(p,m){\r\n		if(operate){\r\n			var num = resultDom.value;\r\n			num = (num == "0" ? "":num);\r\n			// 拼接操作符\r\n			resultDom.value = num + p;\r\n			operate = false;\r\n			xop = true;\r\n		}\r\n		// 点击键盘时候的声音\r\n		paly(m);\r\n	}\r\n	// 计算等于\r\n	function equal(m){\r\n		paly(m);\r\n		var result = resultDom.value;\r\n		var r = eval(result);\r\n		resultDom.value = r;\r\n	}\r\n	// 清空\r\n	function clearzero(m){\r\n		resultDom.value = 0;\r\n		paly(m);\r\n		xop = true;\r\n		operate = true;\r\n	}\r\n	// 点击小数点\r\n	function dot(m){\r\n		if(xop){\r\n			var num = resultDom.value;\r\n			num = num + "."; // num += ".";\r\n			resultDom.value = num;\r\n			xop = false;\r\n		}\r\n		// 播放按键声音\r\n		paly(m);\r\n	}\r\n\r\n	// 退格键\r\n	function del(m){\r\n		// 获取文本框的内容\r\n		var str = resultDom.value;\r\n		// 截取最后一个数字\r\n		str = str.substring(0,str.length - 1);\r\n		str = (str == "" ? 0 : str);\r\n		resultDom.value = str;\r\n		// \r\n		paly(m);\r\n	}\r\n&lt;/script&gt;</code>\r\n</pre>\r\n<div class="toolbar"><div class="toolbar-item"><span>JavaScript</span></div></div>\r\n				</div>\r\n	<a href="calc_demo.html" class="sharebtn" target="_blank">DEMO展示</a>', 'js计算器', 'js、前端笔记、js计算器', '用javascript写了一个Q弹计算器，赶紧进来看一看'),
(42, 0, 0, 0, 0, ' 	<p class="title_p">\r\n  		<img src="img/hbuilder.jpg" class="small_img"/>\r\n  		<img src="img/win10.jpg" class="small_img"/>\r\n  		Hbuilder官网下载：链接：<a href="http://www.dcloud.io" target="_blank" class="title_a">http://www.dcloud.io</a>\r\n  	</p>\r\n  	<p class="title_p">\r\n  		<img src="img/vscode.png" class="small_img"/>\r\n  		<img src="img/win10.jpg" class="small_img"/>\r\n  		VS Code官网下载:链接:<a href="https://code.visualstudio.com/" target="_blank" class="title_a">https://code.visualstudio.com/</a>\r\n  	</p>\r\n  	<p class="title_p">\r\n  		<img src="img/sublime.jpg" class="small_img"/>\r\n  		<img src="img/win10.jpg" class="small_img"/>\r\n  		Sublime Text官网下载：链接:<a href="http://www.sublimetext.com/" target="_blank" class="title_a">http://www.sublimetext.com/</a>\r\n  	</p>\r\n  	<p class="title_p">\r\n  		<img src="img/ps.jpg" class="small_img"/>\r\n  		<img src="img/win10.jpg" class="small_img"/>\r\n  		平面设计、动画设计、程序开发等多种软件：链接：<a href="https://zixue.3d66.com/popsoft.html" class="title_a" target="_blank">https://zixue.3d66.com/popsoft.html</a>\r\n  	</p>\r\n  	<p class="title_p">\r\n  		<img src="img/panda.jpg"/>\r\n  		<img src="img/win10.jpg" class="small_img"/>\r\n  		图片压缩：链接：<a href="https://tinypng.com/" class="title_a" target="_blank">https://tinypng.com/</a>\r\n  	</p>', '软件分享', '软件分享、前端笔记、前端软件分享', '给大家分享一些前端开发常用的软件工具，编辑器有HBuilder、Sublime Text、Dreamweaver、WebStorm、Visual Studio Code,UI设计制作软件常用的PS，W');

-- --------------------------------------------------------

--
-- 表的结构 `user`
--

CREATE TABLE IF NOT EXISTS `user` (
  `user_id` int(4) NOT NULL,
  `user_name` varchar(20) COLLATE utf8_unicode_ci NOT NULL,
  `user_browser` varchar(20) COLLATE utf8_unicode_ci NOT NULL,
  `user_system` varchar(20) COLLATE utf8_unicode_ci NOT NULL,
  `user_bg` varchar(9) COLLATE utf8_unicode_ci NOT NULL
) ENGINE=InnoDB AUTO_INCREMENT=29 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- --------------------------------------------------------

--
-- 表的结构 `user_common`
--

CREATE TABLE IF NOT EXISTS `user_common` (
  `user_id` int(4) NOT NULL,
  `common_id` int(4) NOT NULL,
  `article_id` int(4) NOT NULL,
  `common_content` varchar(150) COLLATE utf8_unicode_ci NOT NULL,
  `common_time` int(12) NOT NULL
) ENGINE=InnoDB AUTO_INCREMENT=27 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

--
-- Indexes for dumped tables
--

--
-- Indexes for table `article`
--
ALTER TABLE `article`
  ADD PRIMARY KEY (`article_id`);

--
-- Indexes for table `article_details`
--
ALTER TABLE `article_details`
  ADD PRIMARY KEY (`details_id`);

--
-- Indexes for table `user`
--
ALTER TABLE `user`
  ADD PRIMARY KEY (`user_id`);

--
-- Indexes for table `user_common`
--
ALTER TABLE `user_common`
  ADD PRIMARY KEY (`common_id`,`user_id`,`article_id`) USING BTREE,
  ADD KEY `a1` (`user_id`),
  ADD KEY `a2` (`article_id`);

--
-- AUTO_INCREMENT for dumped tables
--

--
-- AUTO_INCREMENT for table `article`
--
ALTER TABLE `article`
  MODIFY `article_id` int(4) NOT NULL AUTO_INCREMENT,AUTO_INCREMENT=43;
--
-- AUTO_INCREMENT for table `user`
--
ALTER TABLE `user`
  MODIFY `user_id` int(4) NOT NULL AUTO_INCREMENT,AUTO_INCREMENT=29;
--
-- AUTO_INCREMENT for table `user_common`
--
ALTER TABLE `user_common`
  MODIFY `common_id` int(4) NOT NULL AUTO_INCREMENT,AUTO_INCREMENT=27;
--
-- 限制导出的表
--

--
-- 限制表 `article_details`
--
ALTER TABLE `article_details`
  ADD CONSTRAINT `a` FOREIGN KEY (`details_id`) REFERENCES `article` (`article_id`) ON DELETE CASCADE ON UPDATE CASCADE;

--
-- 限制表 `user_common`
--
ALTER TABLE `user_common`
  ADD CONSTRAINT `a1` FOREIGN KEY (`user_id`) REFERENCES `user` (`user_id`) ON DELETE CASCADE ON UPDATE CASCADE,
  ADD CONSTRAINT `a2` FOREIGN KEY (`article_id`) REFERENCES `article` (`article_id`) ON DELETE CASCADE ON UPDATE CASCADE;

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
